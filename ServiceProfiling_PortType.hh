// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R4A
// for dark (dark@development) on Sun Jun  3 20:41:18 2018

// Copyright (c) 2000-2018 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef ServiceProfiling__PortType_HH
#define ServiceProfiling__PortType_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>
#include "ServiceProfiling_Types.hh"

#if TTCN3_VERSION != 60400
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef ServiceProfiling__PortType_HH
#endif

namespace ServiceProfiling__PortType {

/* Forward declarations of classes */

class ManoMsg_BASE;
class ManoMsg;

} /* end of namespace */

#ifndef ServiceProfiling__PortType_HH
#define ServiceProfiling__PortType_HH

namespace ServiceProfiling__PortType {

/* Type definitions */

typedef COMPONENT MANO;
typedef COMPONENT_template MANO_template;

/* Class definitions */

class ManoMsg_BASE : public PORT {
enum msg_selection { MESSAGE_0 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
ServiceProfiling__Types::Start__CMD__reply *message_0;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
ManoMsg_BASE(const char *par_port_name);
~ManoMsg_BASE();
void send(const ServiceProfiling__Types::Setup__SFC& send_par, const COMPONENT& destination_component);
void send(const ServiceProfiling__Types::Setup__SFC& send_par);
void send(const ServiceProfiling__Types::Setup__SFC_template& send_par, const COMPONENT& destination_component);
void send(const ServiceProfiling__Types::Setup__SFC_template& send_par);
void send(const ServiceProfiling__Types::Add__VNF& send_par, const COMPONENT& destination_component);
void send(const ServiceProfiling__Types::Add__VNF& send_par);
void send(const ServiceProfiling__Types::Add__VNF_template& send_par, const COMPONENT& destination_component);
void send(const ServiceProfiling__Types::Add__VNF_template& send_par);
void send(const ServiceProfiling__Types::ResourceConfiguration& send_par, const COMPONENT& destination_component);
void send(const ServiceProfiling__Types::ResourceConfiguration& send_par);
void send(const ServiceProfiling__Types::ResourceConfiguration_template& send_par, const COMPONENT& destination_component);
void send(const ServiceProfiling__Types::ResourceConfiguration_template& send_par);
void send(const ServiceProfiling__Types::Start__CMD& send_par, const COMPONENT& destination_component);
void send(const ServiceProfiling__Types::Start__CMD& send_par);
void send(const ServiceProfiling__Types::Start__CMD_template& send_par, const COMPONENT& destination_component);
void send(const ServiceProfiling__Types::Start__CMD_template& send_par);
protected:
virtual void outgoing_send(const ServiceProfiling__Types::Setup__SFC& send_par) = 0;
virtual void outgoing_send(const ServiceProfiling__Types::Add__VNF& send_par) = 0;
virtual void outgoing_send(const ServiceProfiling__Types::ResourceConfiguration& send_par) = 0;
virtual void outgoing_send(const ServiceProfiling__Types::Start__CMD& send_par) = 0;
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status receive(const ServiceProfiling__Types::Start__CMD__reply_template& value_template, ServiceProfiling__Types::Start__CMD__reply *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const ServiceProfiling__Types::Start__CMD__reply_template& value_template, ServiceProfiling__Types::Start__CMD__reply *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const ServiceProfiling__Types::Start__CMD__reply_template& value_template, ServiceProfiling__Types::Start__CMD__reply *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
private:
void incoming_message(const ServiceProfiling__Types::Start__CMD__reply& incoming_par, component sender_component);
protected:
inline void incoming_message(const ServiceProfiling__Types::Start__CMD__reply& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};


/* Global variable declarations */

extern const TTCN_Typedescriptor_t& MANO_descr_;
extern ManoMsg MANO_component_Port;
extern TTCN_Module module_object;

} /* end of namespace */

/* Test port header files */

#include "ManoMsg.hh"

#endif
