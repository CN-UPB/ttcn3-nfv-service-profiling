module TSP_Functions {

    import from TSP_Types all;
    import from TSP_PortType all;

    //function f_setup_sfc(charstring service_name) runs on MANO {
    //  Port.send( service_name );
    //}

    function f_create_starting_parameter_config(template TSP_Experiment spe) return template ParameterConfigurations {
        var template ParameterConfigurations rcfgs := {};

        for(var integer i := 0; i < sizeof(spe.paramcfgs); i := i + 1) {
            // Main parameter configs
            var integer vcpus := valueof(spe.paramcfgs[i].vcpus[0]);
            var integer memory := valueof(spe.paramcfgs[i].memory[0]);
            var integer storage := valueof(spe.paramcfgs[i].storage[0]);

            // Additional parameter configs
            var template ParameterValues additional_param_values := {};
            if(isbound(spe.paramcfgs[i].additional_parameters)) {
                for(var integer j := 0; j < sizeof(spe.paramcfgs[i].additional_parameters); j := j + 1) {
                    template ParameterDef additional_parameter := spe.paramcfgs[i].additional_parameters[j];
                    select union (valueof(additional_parameter.parameter)) {
                        case (macro) { additional_param_values[j] := { name := additional_parameter.name, 
                                        input := float2str(valueof(additional_parameter.parameter.macro.min)) };
                                     }
                        case (list) { additional_param_values[j] := { name := additional_parameter.name,
                                        input := int2str(valueof(additional_parameter.parameter.list[0])) };
                                    }
                    }
                }
            }
            
            var integer next_item := sizeof(rcfgs);
            rcfgs[next_item] := { function_id := valueof(spe.paramcfgs[i].function_id),
                                  vcpus := vcpus,
                                  memory := memory,
                                  storage := storage,
                                  additional_parameters := additional_param_values
                              };
        }

        log("Created the following starting template: ", rcfgs);

        return rcfgs;
    }

    function f_create_modulo_list_for_additional_parameters(template TSP_Experiment spe) return moduloMatrix {
        var moduloMatrix mmatrix := {};
        for(var integer i := 0; i < sizeof(spe.paramcfgs); i := i + 1) {
            var moduloList modulos := {};
            var integer previousItem := 1;
            if(isbound(spe.paramcfgs[i].additional_parameters)) {
                for(var integer j := 0; j < sizeof(spe.paramcfgs[i].additional_parameters); j := j + 1) {
                    template ParameterDef additional_parameter := spe.paramcfgs[i].additional_parameters[j];

                    var integer modulo;
                    select union (valueof(additional_parameter.parameter)) {
                        case (macro) {
                                        var float delta := valueof(additional_parameter.parameter.macro.max) - valueof(additional_parameter.parameter.macro.min);
                                        modulo := float2int(delta / valueof(additional_parameter.parameter.macro.step)) * previousItem;

                                     }
                        case (list) {
                                        modulo := sizeof(additional_parameter.parameter.list) * previousItem;
                                    }
                    }
                    
                    var integer next_item := sizeof(modulos);
                    modulos[next_item] := modulo;

                    previousItem := modulo;
                }
            }

            var integer next_mm_item := sizeof(mmatrix);
            mmatrix[next_mm_item] := modulos
        }

        log("Created the following modulo matrix: ", mmatrix);
        return mmatrix;
    }
}

