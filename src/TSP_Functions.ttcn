/*
 * Copyright 2018 Christian Dr√∂ge <mail@cdroege.de>
 *
 * All rights reserved. This program and the accompanying materials are
 * made available under the terms of the Eclipse Public License v2.0 which
 * accompanies this distribution and is available at
 *
 * http://www.eclipse.org/legal/epl-v20.html
 */

module TSP_Functions {

    import from TSP_Types all;
    import from TSP_PortType all;

    /**
     * Creates a flat list of parameters, their possible values and the current set value. Starting value is the first value
     * @param spe_params ParameterConfigurationMacros that are used to build the list of parameters
     * @return ParameterConfigurations The built list
     */
    function f_create_starting_parameter_config(template ParameterConfigurationMacros spe_params) return template ParameterConfigurations {
        var template ParameterConfigurations paramcfgs := {};

        for(var integer i := 0; i < sizeof(spe_params); i := i + 1) {
            var integer index_next_element := sizeof(paramcfgs);
            // Main parameter configs, TODO: Create function for code reuse
            var template ParameterConfiguration cpu_value := {
                function_id := valueof(spe_params[i].function_id),
                parameter_name := "vcpus",
                value_list := f_paramlist_to_charlist(valueof(spe_params[i].vcpus)),
                current_value := int2str(valueof(spe_params[i].vcpus[0]))
            };
            paramcfgs[index_next_element] := cpu_value;
            var template ParameterConfiguration memory_value := {
                function_id := valueof(spe_params[i].function_id),
                parameter_name := "memory",
                value_list := f_paramlist_to_charlist(valueof(spe_params[i].memory)),
                current_value := int2str(valueof(spe_params[i].memory[0]))
            };
            paramcfgs[index_next_element+1] := memory_value;
            var template ParameterConfiguration storage_value := {
                function_id := valueof(spe_params[i].function_id),
                parameter_name := "storage",
                value_list := f_paramlist_to_charlist(valueof(spe_params[i].storage)),
                current_value := int2str(valueof(spe_params[i].storage[0]))
            };
            paramcfgs[index_next_element+2] := storage_value;

            // Additional parameter configs
            if(isbound(spe_params[i].additional_parameters)) {
                for(var integer j := 0; j < sizeof(spe_params[i].additional_parameters); j := j + 1) {
                    index_next_element := sizeof(paramcfgs);
                    template ParameterDef additional_parameter := spe_params[i].additional_parameters[j];
                    select union (valueof(additional_parameter.parameter)) {
                        case (macro) {
                            var ParameterCharList paramcharlist;

                            for(var float value_from_list := valueof(additional_parameter.parameter.macro.min); value_from_list <= valueof(additional_parameter.parameter.macro.max); value_from_list := value_from_list + valueof(additional_parameter.parameter.macro.step)) {
                                var integer new_element_index;
                                if(isbound(paramcharlist)) {
                                    new_element_index := sizeof(paramcharlist)
                                } else {
                                    new_element_index := 0;
                                }
                                paramcharlist[new_element_index] := float2str(value_from_list);
                            }

                            paramcfgs[j+index_next_element] := {
                                function_id := valueof(spe_params[i].function_id),
                                parameter_name := additional_parameter.name, 
                                value_list := paramcharlist,
                                current_value := float2str(valueof(additional_parameter.parameter.macro.min))
                            };
                        }
                        case (list) {
                            paramcfgs[j+index_next_element] := {
                                function_id := valueof(spe_params[i].function_id),
                                parameter_name := additional_parameter.name,
                                value_list := f_paramlist_to_charlist(valueof(additional_parameter.parameter.list)),
                                current_value := int2str(valueof(additional_parameter.parameter.list[0]))
                            };
                        }
                        case (floatlist) {
                            paramcfgs[j+index_next_element] := {
                                function_id := valueof(spe_params[i].function_id),
                                parameter_name := additional_parameter.name,
                                value_list := f_paramfloatlist_to_charlist(valueof(additional_parameter.parameter.floatlist)),
                                current_value := float2str(valueof(additional_parameter.parameter.floatlist[0]))
                            };
                        }
                        case (charlist) {
                            paramcfgs[j+index_next_element] := {
                                function_id := valueof(spe_params[i].function_id),
                                parameter_name := additional_parameter.name,
                                value_list := valueof(additional_parameter.parameter.charlist),
                                current_value := valueof(additional_parameter.parameter.charlist[0])
                            };
                        }
                        case (single_value) {
                            paramcfgs[j+index_next_element] := {
                                function_id := valueof(spe_params[i].function_id),
                                parameter_name := additional_parameter.name,
                                value_list := { valueof(additional_parameter.parameter.single_value) },
                                current_value := valueof(additional_parameter.parameter.single_value)
                            };
                        }
                    }
                }
            }
        }

        log("Created the following starting template: ", paramcfgs);

        return paramcfgs;
    }


    /**
     * Increments one value from a ParameterConfigurations list. If the value overflows, the special value "overflow" is set
     * @param paramcfgs The ParameterConfigurations list that should be used
     * @param index_param Index of the element in paramcfgs that should be incremented
     */
    function f_increment_parameter_config(inout template ParameterConfigurations paramcfgs, integer index_param) {
        log("Incrementing ", paramcfgs[index_param].parameter_name);

        var integer index_current_element := f_find_index_for_element_in_parametercharlist(valueof(paramcfgs[index_param].current_value), valueof(paramcfgs[index_param].value_list));
        var integer index_last_element := sizeof(paramcfgs[index_param].value_list) - 1;

        if(index_current_element == index_last_element) {
            log("Overflow for parameter: ", paramcfgs[index_param].parameter_name);
            paramcfgs[index_param].current_value := "overflow";
        } else {
            paramcfgs[index_param].current_value := valueof(paramcfgs[index_param].value_list[index_current_element+1])
        }
    }


    /**
     * Set a specific value in a ParameterConfigurations list to its initial value
     * @param paramcfgs The ParameterConfigurations list
     * @param index_param Index of the element in the ParameterConfigurations list that should be set to its initial value
     */
    function f_set_parameter_config_to_initial_value(inout template ParameterConfigurations paramcfgs, integer index_param) {
        paramcfgs[index_param].current_value := valueof(paramcfgs[index_param].value_list[0]);
    }

    /**
     * Finds the index for a specific element in a ParameterCharList
     * @param element The element that should be searched for
     * @param list The ParameterCharList list that should be search
     * @return Index of the element in the ParameterCharList. Set to -1 if there is no such element in the list
     */
    function f_find_index_for_element_in_parametercharlist(charstring element, ParameterCharList list) return integer {
        for(var integer i := 0; i < sizeof(list); i := i + 1) {
            if(list[i] == element) {
                return i;
            }
        }

        // We did not find the value
        return -1;
    }

    /**
     * Finds the index for a specific metric identified by a output_parser charstring in a Metrics list
     * @param output_parser The output_parser that should be used to search for a Metric
     * @param metrics The Metrics list that should be searched
     * @return Index of the element in the Metrics list. Set to -1 if there is no such element in the list
     */
    function f_find_metric_index_from_output_parser(Metrics metrics, charstring output_parser) return integer {
        for(var integer i := 0; i < sizeof(metrics); i := i + 1) {
            if(metrics[i].output_parser == output_parser) {
                return i;
            }
        }

        // error
        return -1;
    }

    /**
     * Converts a ParameterList to a ParameterCharList
     * @param paramlist The ParameterList
     * @return The created ParameterCharList
     */
    function f_paramlist_to_charlist(ParameterList paramlist) return ParameterCharList {
        var ParameterCharList paramcharlist;
        for(var integer i := 0; i < sizeof(paramlist); i := i + 1) {
            paramcharlist[i] := int2str(valueof(paramlist[i]));
        }
        return paramcharlist;
    }

    /**
     * Converts a ParameterFloatList to a ParameterCharList
     * @param paramlist The ParameterFloatList
     * @return The created ParameterCharList
     */
    function f_paramfloatlist_to_charlist(ParameterFloatList paramfloatlist) return ParameterCharList {
        var ParameterCharList paramcharlist;
        for(var integer i := 0; i < sizeof(paramfloatlist); i := i + 1) {
            paramcharlist[i] := float2str(valueof(paramfloatlist[i]));
        }
        return paramcharlist;
    }

    /**
     * Tests if a parameter is overflown in a ParameterConfigurations list
     * @param paramcfgs The ParameterConfigurations list
     * @param index_param The index of the parameter that should be checked
     * @return true if the element overflowed, else false
     */
    function f_test_for_parameter_overflow(template ParameterConfigurations paramcfgs, integer index_param) return boolean {
        if(valueof(paramcfgs[index_param].current_value) == "overflow") {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Perform a cleanup
     */
    function f_perform_cleanup() runs on MANO {
        template Cleanup_Request cleanup_req := {};
        Mano.send(cleanup_req);
        serviceprofiling_timer.start(30.0);
        receive_Operation_Status();
        serviceprofiling_timer.stop;
    }

    /**
     * Altstep for Operation_Status handling from the MANO component
     */
    altstep receive_Operation_Status() runs on MANO {
        [] Mano.receive(Operation_Status:{ success := true, reason := "" }) {
            // Everything OK
        }
        [] Mano.receive {
            // We got junk and that should never happen
            setverdict(fail);
            stop;
        }
        [] serviceprofiling_timer.timeout {
            setverdict(fail);
            stop;
        }

    }
}

