module TSP_Testcases {
    import from TSP_Types all;
    import from TSP_PortType all;
    import from TSP_Functions all;

    // A service profiling test case for NFV
    testcase TC_serviceprofiling(template TSP_Serviceprofiling_Experiment spe) runs on MANO system MANO {
        map(mtc:Mano, system:Mano);
        map(mtc:Report, system:Report);
        
        // Create a flat list of parameter configurations that will be used to increment parameter configurations
        // and saving the current state of parameter configurations
        var template ParameterConfigurations paramcfgs := f_create_starting_parameter_config(spe.paramcfgs);

        // The current number of runs
        var integer run := 0;

        // False, if there are SPP parameters that should be tested
        var boolean all_parameters_tested := false;

        // Parameter Configs
        while(all_parameters_tested == false) {
            // Repetitions
            for(var integer repetition := 0; repetition < valueof(spe.repetitions); repetition := repetition + 1) {
                template Set_Parameter_Config param_config_request := { spe.service_name, paramcfgs };
                Mano.send(param_config_request);
                serviceprofiling_timer.start(30.0);
                // This alternative cannot be put into a function or altstep due to the cotinue keyword
                alt {
                     [] Mano.receive(Operation_Status:{ success := false, reason := ? }) {
                            // There was a non fatal error, so clean up and restart at the start of the loop
                            setverdict(inconc);
                            f_perform_cleanup();
                            continue;
                    }
                     [] receive_Operation_Status();
                }
                serviceprofiling_timer.stop;

                log("Current SPP configuration: ", paramcfgs);
                template Setup_SFC setup_sfc_req := { spe.service_name }
                Mano.send(setup_sfc_req);
                serviceprofiling_timer.start(30.0);
                alt {
                     [] Mano.receive(Operation_Status:{ success := false, reason := ? }) {
                            // There was a non fatal error, so clean up and restart at the start of the loop
                            setverdict(inconc);
                            f_perform_cleanup();
                            continue;
                    }
                     [] receive_Operation_Status();
                }
                serviceprofiling_timer.stop;

                template Add_Agents add_agents_request := { spe.agents };
                Mano.send(add_agents_request);
                serviceprofiling_timer.start(30.0);
                alt {
                     [] Mano.receive(Operation_Status:{ success := false, reason := ? }) {
                            // There was a non fatal error, so clean up and restart at the start of the loop
                            setverdict(inconc);
                            f_perform_cleanup();
                            continue;
                    }
                     [] receive_Operation_Status();
                }
                serviceprofiling_timer.stop;

                if(ispresent(spe.monitors)) {
                    template Add_Monitors add_monitors_request := { spe.service_name, spe.monitors };
                    Mano.send(add_monitors_request);
                    serviceprofiling_timer.start(30.0);
                    alt {
                         [] Mano.receive(Operation_Status:{ success := false, reason := ? }) {
                                // There was a non fatal error, so clean up and restart at the start of the loop
                                setverdict(inconc);
                                f_perform_cleanup();
                                continue;
                        }
                         [] receive_Operation_Status();
                    }

                    serviceprofiling_timer.stop;
                }

                template Start_CMD start_cmd_request := { spe.agents };
                Mano.send(start_cmd_request);
                serviceprofiling_timer.start(valueof(spe.profiling_timeout));
                alt {
                     [] Mano.receive(Operation_Status:{ success := false, reason := ? }) {
                            // There was a non fatal error, so clean up and restart at the start of the loop
                            setverdict(inconc);
                            f_perform_cleanup();
                            continue;
                    }
                     [] receive_Operation_Status();
                }
                serviceprofiling_timer.stop;
               
                // We get a second message if the operation was successful
                var Start_CMD_Reply cmd_reply;
                alt {
                    [] Mano.receive(Start_CMD_Reply:?) -> value cmd_reply {
                        // We received a metric
                        // TODO: monitor_metrics might be empty/unbound
                        template Save_Metric save_metric_request := { spe.name, cmd_reply.metrics, cmd_reply.monitor_metrics, paramcfgs, run };
                        Report.send(save_metric_request);
                        //serviceprofiling_timer.start(30.0);
                        //receive_Operation_Status();
                        setverdict(pass);
                       }
                    [] Mano.receive {
                        // We received junk and that should not happen
                        setverdict(fail)
                        serviceprofiling_timer.stop;
                       }
                    [] serviceprofiling_timer.timeout {
                        // Collecting the metric concluded in a timeout
                        setverdict(inconc)
                        serviceprofiling_timer.stop;
                       }
                }

                f_perform_cleanup();

                run := run + 1;
            }

            // Increment last parameter
            var integer last_param_index := sizeof(paramcfgs) - 1;
            f_increment_parameter_config(paramcfgs, last_param_index);

            // Check for overflows starting from the last parameter
            // This works like an odometer
            for(var integer i := last_param_index; i > 0; i := i - 1) {
                // If there is an overflow, set it to the initial value and increment
                // the previous value
                if(f_test_for_parameter_overflow(paramcfgs, i)) {
                    f_set_parameter_config_to_initial_value(paramcfgs, i);
                    f_increment_parameter_config(paramcfgs, i-1);
                } else {
                    break;
                }
            }
            
            if(f_test_for_parameter_overflow(paramcfgs, 0)) {
                // We tested the last element, so stop the loop
                f_set_parameter_config_to_initial_value(paramcfgs, 0);
                all_parameters_tested := true;
            }
        }
    }

    // A verification test case for NFV service profiling
    testcase TC_verification(template TSP_Verification_Experiment spe) runs on MANO system MANO {
        map(mtc:Mano, system:Mano);
        var template ParameterConfigurations paramcfgs := f_create_starting_parameter_config(spe.paramcfgs);

        // TODO: The following code can probably be shared with the serviceprofiling testcase (although the input types are different)
        template Set_Parameter_Config param_config_request := { spe.service_name, paramcfgs };
        Mano.send(param_config_request);
        serviceprofiling_timer.start(30.0);
        receive_Operation_Status();
        serviceprofiling_timer.stop;

        template Setup_SFC setup_sfc_req := { spe.service_name }
        Mano.send(setup_sfc_req);
        serviceprofiling_timer.start(30.0);
        receive_Operation_Status();
        serviceprofiling_timer.stop;

        template Add_Agents add_agents_request := { spe.agents };
        Mano.send(add_agents_request);
        serviceprofiling_timer.start(30.0);
        receive_Operation_Status();
        serviceprofiling_timer.stop;

        template Start_CMD start_cmd_request := { spe.agents };
        Mano.send(start_cmd_request);
        serviceprofiling_timer.start(valueof(spe.verification_timeout));
        receive_Operation_Status();
        serviceprofiling_timer.stop;

        var Start_CMD_Reply cmd_reply := {};
        alt {
            [] Mano.receive(Start_CMD_Reply:?) -> value cmd_reply {
                // We received a metric
                //template Save_Metric save_metric_request := { spe.name, cmd_reply.metrics, cmd_reply.monitor_metrics, paramcfgs, run };
                for(var integer i := 0; i < sizeof(spe.metrics); i := i + 1) {
                    var integer cmd_reply_metric_index := f_find_metric_index_from_output_parser(cmd_reply.metrics, valueof(spe.metrics[i].output_parser));

                    // Test if the value is too small
                    if(str2float(cmd_reply.metrics[cmd_reply_metric_index].metric_value) <= str2float(valueof(spe.metrics[i].metric_value)) * (1.0 - valueof(spe.deviation))) {
                        log("The metric is too small: ", valueof(spe.metrics[i].output_parser));
                        setverdict(fail);
                    }
                   
                    // Test if the value is too large
                    if(str2float(cmd_reply.metrics[cmd_reply_metric_index].metric_value) >= str2float(valueof(spe.metrics[i].metric_value)) * (1.0 + valueof(spe.deviation))) {
                        log("The metric is too large: ", valueof(spe.metrics[i].output_parser));
                        setverdict(fail);
                    }
                }

                setverdict(pass);
               }
            [] Mano.receive {
                // We received junk and that should not happen
                setverdict(fail)
               }
            [] serviceprofiling_timer.timeout {
                // Collecting the metric concluded in a timeout
                setverdict(inconc)
               }
        }

        serviceprofiling_timer.stop;
    }
}
