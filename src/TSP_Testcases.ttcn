module TSP_Testcases {

    import from TSP_Types all;
    import from TSP_PortType all;
    import from TSP_Functions all;

    testcase SimpleTSP(template TSP_Experiment spe) runs on MANO system MANO {
        map(mtc:Mano, system:Mano);
        map(mtc:Report, system:Report);
        
        timer serviceprofiling_timeout;

        var template ParameterConfigurations paramcfgs := f_create_starting_parameter_config(spe);
        var moduloMatrix mmatrix := f_create_modulo_list_for_additional_parameters(spe);

        var integer run := 0;

        // Parameter Configs
        for(var integer current_param := 0; current_param < sizeof(spe.paramcfgs); current_param := current_param + 1) {
            // vCPUs
            for(var integer vcpu_index := 0; vcpu_index < sizeof(spe.paramcfgs[current_param].vcpus); vcpu_index := vcpu_index + 1) {
                paramcfgs[current_param].vcpus := spe.paramcfgs[current_param].vcpus[vcpu_index];

                // Memory
                for(var integer memory_index := 0; j < sizeof(spe.paramcfgs[current_param].memory); j := j + 1) {
                    paramcfgs[current_param].memory := spe.paramcfgs[current_param].memory[memory_index];

                    // Additional Parameters
                    var float last_element_add_param;
                    select union (valueof(spe.paramcfgs[current_param].additional_parameters[0].parameter)) {
                        case (macro) {
                                        last_element_add_param := valueof(spe.paramcfgs[current_param].additional_parameters[0].parameter.macro.max);
                                     }
                        case (list) {
                                        var integer last_element_index := sizeof(spe.paramcfgs[current_param].additional_parameters[0].parameter.list)
                                        last_element_add_param := valueof(spe.paramcfgs[current_param].additional_parameters[0].parameter.list[last_element_index]);
                                    }
                    }
                    while(str2float(valueof(paramcfgs[current_param].additional_parameters[0].input)) != last_element_add_param) {
                        var integer last_param_index := sizeof(paramcfgs[current_param].additional_parameters);

                        // Increment last parameter
                        f_increment_parameter_config(paramcfgs, spe, current_param, last_param_index);

                        for(var integer i := last_param_index - 1; i > 0; i := i - 1) {
							select union(valueof(spe.paramcfgs[current_param].additional_parameters[i].parameter)) {
								case (macro) {
                                                // Stop processing if this is not the last element in the macro
                                                if(paramcfgs[current_param].additional_parameters[last_param_index].input <= str2float(valueof(spe.paramcfgs[current_param].additional_parameters[last_param_index].macro.max)) {
                                                    break;
                                                } else {
                                                    f_increment_parameter_config(paramcfgs, spe, current_param, i);
                                                    input[i-1] := next element
                                                }
											 }
                                case (list) {
                                                // Stop processing if we are the last element
                                                if(not_last_element) { break };
                                            }
							}
						}
                              
                    }

                        template Set_Parameter_Config param_config_request := {spe.service_name, paramcfgs};
                        Mano.send(param_config_request);

                        // Repetitions
                        for(var integer n := 0; n < valueof(spe.repetitions); n := n + 1) {
                            template Setup_SFC setup_sfc_req := { spe.service_name }
                            Mano.send(setup_sfc_req);

                            template Add_Agents add_agents_request := { spe.agents };
                            Mano.send(add_agents_request);

                            if(ispresent(spe.monitors)) {
                                template Add_Monitors add_monitors_request := { spe.service_name, spe.monitors, 1 };
                                Mano.send(add_monitors_request);
                            }

                            template Start_CMD start_cmd_request := { spe.agents };
                            Mano.send(start_cmd_request);

                            serviceprofiling_timeout.start(valueof(spe.profiling_timeout));

                            var Start_CMD_Reply cmd_reply := {};
                            alt {
                                [] Mano.receive(Start_CMD_Reply:?) -> value cmd_reply {
                                    // We received a metric
                                    template Save_Metric save_metric_request := { spe.name, cmd_reply.metric, paramcfgs, run };
                                    Report.send(save_metric_request);
                                   }
                                [] Mano.receive {
                                    // We received junk and that should not happen
                                    setverdict(fail)
                                   }
                                [] serviceprofiling_timeout.timeout {
                                    // Collecting the metric concluded in a timeout
                                    setverdict(inconc)
                                   }
                            }

                            serviceprofiling_timeout.stop

                            template Cleanup_Request cleanup_req := {}
                            Mano.send(cleanup_req);

                            run := run + 1;
                        }
                    }
                }
            }
        }


        setverdict ( pass );
        stop
    }
}
