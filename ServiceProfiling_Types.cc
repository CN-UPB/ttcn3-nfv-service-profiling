// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R4A
// for dark (dark@development) on Wed Jun  6 21:29:46 2018

// Copyright (c) 2000-2018 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "ServiceProfiling_Types.hh"

namespace ServiceProfiling__Types {

/* Literal string constants */

static const unsigned char module_checksum[] = { 0xe5, 0x38, 0x5f, 0xda, 0xe4, 0x83, 0x3a, 0xa7, 0x41, 0x3b, 0xde, 0x07, 0xd6, 0x00, 0x16, 0x79 };

/* Global variable definitions */

const XERdescriptor_t       ServiceProfilingExperiment_name_xer_ = { {"name>\n", "name>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ServiceProfilingExperiment_name_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ServiceProfilingExperiment_name_descr_ = { "@ServiceProfiling_Types.ServiceProfilingExperiment.name", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ServiceProfilingExperiment_name_xer_, &ServiceProfilingExperiment_name_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ServiceProfilingExperiment_repetitions_xer_ = { {"repetitions>\n", "repetitions>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ServiceProfilingExperiment_repetitions_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ServiceProfilingExperiment_repetitions_descr_ = { "@ServiceProfiling_Types.ServiceProfilingExperiment.repetitions", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &ServiceProfilingExperiment_repetitions_xer_, &ServiceProfilingExperiment_repetitions_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ServiceProfilingExperiment_profiling__timeout_xer_ = { {"profiling_timeout>\n", "profiling_timeout>\n"}, {19, 19}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ServiceProfilingExperiment_profiling__timeout_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ServiceProfilingExperiment_profiling__timeout_descr_ = { "@ServiceProfiling_Types.ServiceProfilingExperiment.profiling_timeout", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &ServiceProfilingExperiment_profiling__timeout_xer_, &ServiceProfilingExperiment_profiling__timeout_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ServiceProfilingExperiment_service__name_xer_ = { {"service_name>\n", "service_name>\n"}, {14, 14}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ServiceProfilingExperiment_service__name_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ServiceProfilingExperiment_service__name_descr_ = { "@ServiceProfiling_Types.ServiceProfilingExperiment.service_name", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ServiceProfilingExperiment_service__name_xer_, &ServiceProfilingExperiment_service__name_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ResourceConfigurations
const TTCN_Typedescriptor_t ResourceConfigurations_descr_ = { "@ServiceProfiling_Types.ResourceConfigurations", NULL, NULL, NULL, NULL, NULL, NULL, &ResourceConfiguration_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceConfiguration_function__id_xer_ = { {"function_id>\n", "function_id>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ResourceConfiguration_function__id_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ResourceConfiguration_function__id_descr_ = { "@ServiceProfiling_Types.ResourceConfiguration.function_id", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ResourceConfiguration_function__id_xer_, &ResourceConfiguration_function__id_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceConfiguration_cpu__time_xer_ = { {"cpu_time>\n", "cpu_time>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ResourceConfiguration_cpu__time_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ResourceConfiguration_cpu__time_descr_ = { "@ServiceProfiling_Types.ResourceConfiguration.cpu_time", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ResourceConfiguration_cpu__time_xer_, &ResourceConfiguration_cpu__time_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceConfiguration_cpu__set_xer_ = { {"cpu_set>\n", "cpu_set>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ResourceConfiguration_cpu__set_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ResourceConfiguration_cpu__set_descr_ = { "@ServiceProfiling_Types.ResourceConfiguration.cpu_set", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ResourceConfiguration_cpu__set_xer_, &ResourceConfiguration_cpu__set_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceConfiguration_max__mem_xer_ = { {"max_mem>\n", "max_mem>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ResourceConfiguration_max__mem_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ResourceConfiguration_max__mem_descr_ = { "@ServiceProfiling_Types.ResourceConfiguration.max_mem", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ResourceConfiguration_max__mem_xer_, &ResourceConfiguration_max__mem_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ResourceConfiguration
const TTCN_Typedescriptor_t ResourceConfiguration_descr_ = { "@ServiceProfiling_Types.ResourceConfiguration", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceConfiguration_sriov_xer_ = { {"sriov>\n", "sriov>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED |XER_OPTIONAL, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ResourceConfiguration_sriov_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const int ResourceConfiguration_sriov_oer_ext_arr_[0] = {};
const int ResourceConfiguration_sriov_oer_p_[0] = {};
const TTCN_OERdescriptor_t ResourceConfiguration_sriov_oer_ = { -1, FALSE, -1, FALSE, 0, 0, ResourceConfiguration_sriov_oer_ext_arr_, 0, ResourceConfiguration_sriov_oer_p_};
const TTCN_Typedescriptor_t ResourceConfiguration_sriov_descr_ = { "@ServiceProfiling_Types.ResourceConfiguration.sriov", &BOOLEAN_ber_, &BOOLEAN_raw_, &BOOLEAN_text_, &ResourceConfiguration_sriov_xer_, &ResourceConfiguration_sriov_json_, &ResourceConfiguration_sriov_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for MeasuringPointVNFs
const TTCN_Typedescriptor_t MeasuringPointVNFs_descr_ = { "@ServiceProfiling_Types.MeasuringPointVNFs", NULL, NULL, NULL, NULL, NULL, NULL, &MeasuringPointVNF_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       MeasuringPointVNF_name_xer_ = { {"name>\n", "name>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t MeasuringPointVNF_name_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t MeasuringPointVNF_name_descr_ = { "@ServiceProfiling_Types.MeasuringPointVNF.name", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &MeasuringPointVNF_name_xer_, &MeasuringPointVNF_name_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       MeasuringPointVNF_connection__point_xer_ = { {"connection_point>\n", "connection_point>\n"}, {18, 18}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t MeasuringPointVNF_connection__point_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t MeasuringPointVNF_connection__point_descr_ = { "@ServiceProfiling_Types.MeasuringPointVNF.connection_point", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &MeasuringPointVNF_connection__point_xer_, &MeasuringPointVNF_connection__point_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       MeasuringPointVNF_image_xer_ = { {"image>\n", "image>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t MeasuringPointVNF_image_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t MeasuringPointVNF_image_descr_ = { "@ServiceProfiling_Types.MeasuringPointVNF.image", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &MeasuringPointVNF_image_xer_, &MeasuringPointVNF_image_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for MeasuringPointVNF
const TTCN_Typedescriptor_t MeasuringPointVNF_descr_ = { "@ServiceProfiling_Types.MeasuringPointVNF", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       MeasuringPointVNF_cmd_xer_ = { {"cmd>\n", "cmd>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED |XER_OPTIONAL, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t MeasuringPointVNF_cmd_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t MeasuringPointVNF_cmd_descr_ = { "@ServiceProfiling_Types.MeasuringPointVNF.cmd", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &MeasuringPointVNF_cmd_xer_, &MeasuringPointVNF_cmd_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ServiceProfilingExperiment
const TTCN_Typedescriptor_t ServiceProfilingExperiment_descr_ = { "@ServiceProfiling_Types.ServiceProfilingExperiment", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Setup__SFC_service__name_xer_ = { {"service_name>\n", "service_name>\n"}, {14, 14}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t Setup__SFC_service__name_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t Setup__SFC_service__name_descr_ = { "@ServiceProfiling_Types.Setup_SFC.service_name", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Setup__SFC_service__name_xer_, &Setup__SFC_service__name_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Setup__SFC
const TTCN_Typedescriptor_t Setup__SFC_descr_ = { "@ServiceProfiling_Types.Setup_SFC", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Add__VNF_name_xer_ = { {"name>\n", "name>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t Add__VNF_name_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t Add__VNF_name_descr_ = { "@ServiceProfiling_Types.Add_VNF.name", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Add__VNF_name_xer_, &Add__VNF_name_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Add__VNF_connection__point_xer_ = { {"connection_point>\n", "connection_point>\n"}, {18, 18}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t Add__VNF_connection__point_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t Add__VNF_connection__point_descr_ = { "@ServiceProfiling_Types.Add_VNF.connection_point", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Add__VNF_connection__point_xer_, &Add__VNF_connection__point_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Add__VNF_image_xer_ = { {"image>\n", "image>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t Add__VNF_image_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t Add__VNF_image_descr_ = { "@ServiceProfiling_Types.Add_VNF.image", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Add__VNF_image_xer_, &Add__VNF_image_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Add__VNF
const TTCN_Typedescriptor_t Add__VNF_descr_ = { "@ServiceProfiling_Types.Add_VNF", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Start__CMD_cmd_xer_ = { {"cmd>\n", "cmd>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t Start__CMD_cmd_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t Start__CMD_cmd_descr_ = { "@ServiceProfiling_Types.Start_CMD.cmd", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Start__CMD_cmd_xer_, &Start__CMD_cmd_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Start__CMD
const TTCN_Typedescriptor_t Start__CMD_descr_ = { "@ServiceProfiling_Types.Start_CMD", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Start__CMD__reply_cmd__reply_xer_ = { {"cmd_reply>\n", "cmd_reply>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t Start__CMD__reply_cmd__reply_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t Start__CMD__reply_cmd__reply_descr_ = { "@ServiceProfiling_Types.Start_CMD_reply.cmd_reply", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Start__CMD__reply_cmd__reply_xer_, &Start__CMD__reply_cmd__reply_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Start__CMD__reply
const TTCN_Typedescriptor_t Start__CMD__reply_descr_ = { "@ServiceProfiling_Types.Start_CMD_reply", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Parameter__Macro_beginning_xer_ = { {"beginning>\n", "beginning>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t Parameter__Macro_beginning_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const int Parameter__Macro_beginning_oer_ext_arr_[0] = {};
const int Parameter__Macro_beginning_oer_p_[0] = {};
const TTCN_OERdescriptor_t Parameter__Macro_beginning_oer_ = { -1, FALSE, -1, FALSE, 0, 0, Parameter__Macro_beginning_oer_ext_arr_, 0, Parameter__Macro_beginning_oer_p_};
const TTCN_Typedescriptor_t Parameter__Macro_beginning_descr_ = { "@ServiceProfiling_Types.Parameter_Macro.beginning", &FLOAT_ber_, &FLOAT_raw_, NULL, &Parameter__Macro_beginning_xer_, &Parameter__Macro_beginning_json_, &Parameter__Macro_beginning_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Parameter__Macro_end_xer_ = { {"end>\n", "end>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t Parameter__Macro_end_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const int Parameter__Macro_end_oer_ext_arr_[0] = {};
const int Parameter__Macro_end_oer_p_[0] = {};
const TTCN_OERdescriptor_t Parameter__Macro_end_oer_ = { -1, FALSE, -1, FALSE, 0, 0, Parameter__Macro_end_oer_ext_arr_, 0, Parameter__Macro_end_oer_p_};
const TTCN_Typedescriptor_t Parameter__Macro_end_descr_ = { "@ServiceProfiling_Types.Parameter_Macro.end", &FLOAT_ber_, &FLOAT_raw_, NULL, &Parameter__Macro_end_xer_, &Parameter__Macro_end_json_, &Parameter__Macro_end_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Parameter__Macro_step_xer_ = { {"step>\n", "step>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t Parameter__Macro_step_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const int Parameter__Macro_step_oer_ext_arr_[0] = {};
const int Parameter__Macro_step_oer_p_[0] = {};
const TTCN_OERdescriptor_t Parameter__Macro_step_oer_ = { -1, FALSE, -1, FALSE, 0, 0, Parameter__Macro_step_oer_ext_arr_, 0, Parameter__Macro_step_oer_p_};
const TTCN_Typedescriptor_t Parameter__Macro_step_descr_ = { "@ServiceProfiling_Types.Parameter_Macro.step", &FLOAT_ber_, &FLOAT_raw_, NULL, &Parameter__Macro_step_xer_, &Parameter__Macro_step_json_, &Parameter__Macro_step_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Parameter__Macro
const TTCN_Typedescriptor_t Parameter__Macro_descr_ = { "@ServiceProfiling_Types.Parameter_Macro", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
TTCN_Module module_object("ServiceProfiling_Types", __DATE__, __TIME__, module_checksum, NULL, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */


const ResourceConfiguration ResourceConfigurations::UNBOUND_ELEM;
ResourceConfigurations::ResourceConfigurations()
{
val_ptr = NULL;
}

ResourceConfigurations::ResourceConfigurations(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

ResourceConfigurations::ResourceConfigurations(const ResourceConfigurations& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @ServiceProfiling_Types.ResourceConfigurations.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

ResourceConfigurations::~ResourceConfigurations()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void ResourceConfigurations::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

ResourceConfigurations& ResourceConfigurations::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

ResourceConfigurations& ResourceConfigurations::operator=(const ResourceConfigurations& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @ServiceProfiling_Types.ResourceConfigurations.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean ResourceConfigurations::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @ServiceProfiling_Types.ResourceConfigurations.");
return val_ptr->n_elements == 0 ;
}

boolean ResourceConfigurations::operator==(const ResourceConfigurations& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @ServiceProfiling_Types.ResourceConfigurations.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @ServiceProfiling_Types.ResourceConfigurations.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

ResourceConfiguration& ResourceConfigurations::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @ServiceProfiling_Types.ResourceConfigurations using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (ResourceConfiguration**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new ResourceConfiguration(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new ResourceConfiguration;
}
return *val_ptr->value_elements[index_value];
}

ResourceConfiguration& ResourceConfigurations::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @ServiceProfiling_Types.ResourceConfigurations.");
return (*this)[(int)index_value];
}

const ResourceConfiguration& ResourceConfigurations::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @ServiceProfiling_Types.ResourceConfigurations.");
if (index_value < 0) TTCN_error("Accessing an element of type @ServiceProfiling_Types.ResourceConfigurations using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @ServiceProfiling_Types.ResourceConfigurations: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const ResourceConfiguration& ResourceConfigurations::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @ServiceProfiling_Types.ResourceConfigurations.");
return (*this)[(int)index_value];
}

ResourceConfigurations ResourceConfigurations::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

ResourceConfigurations ResourceConfigurations::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

ResourceConfigurations ResourceConfigurations::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

ResourceConfigurations ResourceConfigurations::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @ServiceProfiling_Types.ResourceConfigurations.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
ResourceConfigurations ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new ResourceConfiguration(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

ResourceConfigurations ResourceConfigurations::operator+(const ResourceConfigurations& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @ServiceProfiling_Types.ResourceConfigurations concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
ResourceConfigurations ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new ResourceConfiguration(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new ResourceConfiguration(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

ResourceConfigurations ResourceConfigurations::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @ServiceProfiling_Types.ResourceConfigurations.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@ServiceProfiling_Types.ResourceConfigurations","element");
ResourceConfigurations ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new ResourceConfiguration(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

ResourceConfigurations ResourceConfigurations::replace(int index, int len, const ResourceConfigurations& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @ServiceProfiling_Types.ResourceConfigurations.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @ServiceProfiling_Types.ResourceConfigurations.");
check_replace_arguments(val_ptr->n_elements, index, len, "@ServiceProfiling_Types.ResourceConfigurations","element");
ResourceConfigurations ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new ResourceConfiguration(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new ResourceConfiguration(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new ResourceConfiguration(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

ResourceConfigurations ResourceConfigurations::replace(int index, int len, const ResourceConfigurations_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void ResourceConfigurations::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @ServiceProfiling_Types.ResourceConfigurations.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (ResourceConfiguration**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new ResourceConfiguration(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (ResourceConfiguration**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @ServiceProfiling_Types.ResourceConfigurations: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (ResourceConfiguration**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean ResourceConfigurations::is_value() const
{
if (val_ptr == NULL) return FALSE;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int ResourceConfigurations::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @ServiceProfiling_Types.ResourceConfigurations.");
return val_ptr->n_elements;
}

int ResourceConfigurations::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @ServiceProfiling_Types.ResourceConfigurations.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void ResourceConfigurations::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void ResourceConfigurations::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
          if (!(*this)[i].is_bound()) {
            delete val_ptr->value_elements[i];
            val_ptr->value_elements[i] = NULL;
          }
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
        if (!(*this)[curr->get_id()->get_index()].is_bound()) {
          delete val_ptr->value_elements[curr->get_id()->get_index()];
          val_ptr->value_elements[curr->get_id()->get_index()] = NULL;
        }
      }
      break;
    default:
      param.type_error("record of value", "@ServiceProfiling_Types.ResourceConfigurations");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@ServiceProfiling_Types.ResourceConfigurations");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

void ResourceConfigurations::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void ResourceConfigurations::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @ServiceProfiling_Types.ResourceConfigurations.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void ResourceConfigurations::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @ServiceProfiling_Types.ResourceConfigurations.");
val_ptr->value_elements = (ResourceConfiguration**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new ResourceConfiguration;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void ResourceConfigurations_template::copy_value(const ResourceConfigurations& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @ServiceProfiling_Types.ResourceConfigurations with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (ResourceConfiguration_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new ResourceConfiguration_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new ResourceConfiguration_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void ResourceConfigurations_template::copy_template(const ResourceConfigurations_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (ResourceConfiguration_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new ResourceConfiguration_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new ResourceConfiguration_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ResourceConfigurations_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @ServiceProfiling_Types.ResourceConfigurations.");
break;
}
set_selection(other_value);
}

boolean ResourceConfigurations_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const ResourceConfigurations_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const ResourceConfigurations*)value_ptr)[value_index], legacy);
else return ((const ResourceConfigurations_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

ResourceConfigurations_template::ResourceConfigurations_template()
{
}

ResourceConfigurations_template::ResourceConfigurations_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

ResourceConfigurations_template::ResourceConfigurations_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

ResourceConfigurations_template::ResourceConfigurations_template(const ResourceConfigurations& other_value)
{
copy_value(other_value);
}

ResourceConfigurations_template::ResourceConfigurations_template(const OPTIONAL<ResourceConfigurations>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ResourceConfigurations&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @ServiceProfiling_Types.ResourceConfigurations from an unbound optional field.");
}
}

ResourceConfigurations_template::ResourceConfigurations_template(const ResourceConfigurations_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

ResourceConfigurations_template::~ResourceConfigurations_template()
{
clean_up();
}

void ResourceConfigurations_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ResourceConfigurations_template& ResourceConfigurations_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ResourceConfigurations_template& ResourceConfigurations_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

ResourceConfigurations_template& ResourceConfigurations_template::operator=(const ResourceConfigurations& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ResourceConfigurations_template& ResourceConfigurations_template::operator=(const OPTIONAL<ResourceConfigurations>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ResourceConfigurations&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @ServiceProfiling_Types.ResourceConfigurations.");
}
return *this;
}

ResourceConfigurations_template& ResourceConfigurations_template::operator=(const ResourceConfigurations_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

ResourceConfiguration_template& ResourceConfigurations_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @ServiceProfiling_Types.ResourceConfigurations using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @ServiceProfiling_Types.ResourceConfigurations.");
    break;
}
return *single_value.value_elements[index_value];
}

ResourceConfiguration_template& ResourceConfigurations_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @ServiceProfiling_Types.ResourceConfigurations.");
return (*this)[(int)index_value];
}

const ResourceConfiguration_template& ResourceConfigurations_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @ServiceProfiling_Types.ResourceConfigurations using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @ServiceProfiling_Types.ResourceConfigurations.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @ServiceProfiling_Types.ResourceConfigurations: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const ResourceConfiguration_template& ResourceConfigurations_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @ServiceProfiling_Types.ResourceConfigurations.");
return (*this)[(int)index_value];
}

void ResourceConfigurations_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @ServiceProfiling_Types.ResourceConfigurations.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (ResourceConfiguration_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new ResourceConfiguration_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new ResourceConfiguration_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (ResourceConfiguration_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int ResourceConfigurations_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int ResourceConfigurations_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @ServiceProfiling_Types.ResourceConfigurations which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @ServiceProfiling_Types.ResourceConfigurations containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @ServiceProfiling_Types.ResourceConfigurations containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @ServiceProfiling_Types.ResourceConfigurations containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @ServiceProfiling_Types.ResourceConfigurations containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @ServiceProfiling_Types.ResourceConfigurations containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @ServiceProfiling_Types.ResourceConfigurations.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @ServiceProfiling_Types.ResourceConfigurations");
}

boolean ResourceConfigurations_template::match(const ResourceConfigurations& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @ServiceProfiling_Types.ResourceConfigurations.");
}
return FALSE;
}

boolean ResourceConfigurations_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return FALSE;
return TRUE;
}

ResourceConfigurations ResourceConfigurations_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @ServiceProfiling_Types.ResourceConfigurations.");
ResourceConfigurations ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

ResourceConfigurations ResourceConfigurations_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

ResourceConfigurations ResourceConfigurations_template::replace(int index, int len, const ResourceConfigurations_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

ResourceConfigurations ResourceConfigurations_template::replace(int index, int len, const ResourceConfigurations& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void ResourceConfigurations_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new ResourceConfigurations_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @ServiceProfiling_Types.ResourceConfigurations.");
}
set_selection(template_type);
}

ResourceConfigurations_template& ResourceConfigurations_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @ServiceProfiling_Types.ResourceConfigurations.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @ServiceProfiling_Types.ResourceConfigurations.");
return value_list.list_value[list_index];
}

void ResourceConfigurations_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void ResourceConfigurations_template::log_match(const ResourceConfigurations& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ResourceConfigurations_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @ServiceProfiling_Types.ResourceConfigurations.");
}
}

void ResourceConfigurations_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @ServiceProfiling_Types.ResourceConfigurations.");
single_value.value_elements = (ResourceConfiguration_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new ResourceConfiguration_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ResourceConfigurations_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @ServiceProfiling_Types.ResourceConfigurations.");
}
}

boolean ResourceConfigurations_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ResourceConfigurations_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void ResourceConfigurations_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ResourceConfigurations_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@ServiceProfiling_Types.ResourceConfigurations");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void ResourceConfigurations_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.ResourceConfigurations");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@ServiceProfiling_Types.ResourceConfigurations");
}

boolean ResourceConfigurations_template::get_istemplate_kind(const char* type) const {
if (!strcmp(type, "AnyElement")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_VALUE) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "AnyElementsOrNone")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_OR_OMIT) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "permutation")) {
  return number_of_permutations;
} else if (!strcmp(type, "length")) {
  return length_restriction_type != NO_LENGTH_RESTRICTION;
} else {
  return Base_Template::get_istemplate_kind(type);
}
}
ResourceConfiguration::ResourceConfiguration()
{
}

ResourceConfiguration::ResourceConfiguration(const CHARSTRING& par_function__id,
    const CHARSTRING& par_cpu__time,
    const CHARSTRING& par_cpu__set,
    const CHARSTRING& par_max__mem,
    const OPTIONAL<BOOLEAN>& par_sriov)
  :   field_function__id(par_function__id),
  field_cpu__time(par_cpu__time),
  field_cpu__set(par_cpu__set),
  field_max__mem(par_max__mem),
  field_sriov(par_sriov)
{
}

ResourceConfiguration::ResourceConfiguration(const ResourceConfiguration& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @ServiceProfiling_Types.ResourceConfiguration.");
if (other_value.function__id().is_bound()) field_function__id = other_value.function__id();
else field_function__id.clean_up();
if (other_value.cpu__time().is_bound()) field_cpu__time = other_value.cpu__time();
else field_cpu__time.clean_up();
if (other_value.cpu__set().is_bound()) field_cpu__set = other_value.cpu__set();
else field_cpu__set.clean_up();
if (other_value.max__mem().is_bound()) field_max__mem = other_value.max__mem();
else field_max__mem.clean_up();
if (other_value.sriov().is_bound()) field_sriov = other_value.sriov();
else field_sriov.clean_up();
}

void ResourceConfiguration::clean_up()
{
field_function__id.clean_up();
field_cpu__time.clean_up();
field_cpu__set.clean_up();
field_max__mem.clean_up();
field_sriov.clean_up();
}

ResourceConfiguration& ResourceConfiguration::operator=(const ResourceConfiguration& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @ServiceProfiling_Types.ResourceConfiguration.");
  if (other_value.function__id().is_bound()) field_function__id = other_value.function__id();
  else field_function__id.clean_up();
  if (other_value.cpu__time().is_bound()) field_cpu__time = other_value.cpu__time();
  else field_cpu__time.clean_up();
  if (other_value.cpu__set().is_bound()) field_cpu__set = other_value.cpu__set();
  else field_cpu__set.clean_up();
  if (other_value.max__mem().is_bound()) field_max__mem = other_value.max__mem();
  else field_max__mem.clean_up();
  if (other_value.sriov().is_bound()) field_sriov = other_value.sriov();
  else field_sriov.clean_up();
}
return *this;
}

boolean ResourceConfiguration::operator==(const ResourceConfiguration& other_value) const
{
return field_function__id==other_value.field_function__id
  && field_cpu__time==other_value.field_cpu__time
  && field_cpu__set==other_value.field_cpu__set
  && field_max__mem==other_value.field_max__mem
  && field_sriov==other_value.field_sriov;
}

boolean ResourceConfiguration::is_bound() const
{
if(field_function__id.is_bound()) return TRUE;
if(field_cpu__time.is_bound()) return TRUE;
if(field_cpu__set.is_bound()) return TRUE;
if(field_max__mem.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_sriov.get_selection() || field_sriov.is_bound()) return TRUE;
return FALSE;
}
boolean ResourceConfiguration::is_value() const
{
if(!field_function__id.is_value()) return FALSE;
if(!field_cpu__time.is_value()) return FALSE;
if(!field_cpu__set.is_value()) return FALSE;
if(!field_max__mem.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_sriov.get_selection() && !field_sriov.is_value()) return FALSE;
return TRUE;
}
int ResourceConfiguration::size_of() const
{
  int ret_val = 4;
  if (field_sriov.ispresent()) ret_val++;
  return ret_val;
}

void ResourceConfiguration::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ function_id := ");
field_function__id.log();
TTCN_Logger::log_event_str(", cpu_time := ");
field_cpu__time.log();
TTCN_Logger::log_event_str(", cpu_set := ");
field_cpu__set.log();
TTCN_Logger::log_event_str(", max_mem := ");
field_max__mem.log();
TTCN_Logger::log_event_str(", sriov := ");
field_sriov.log();
TTCN_Logger::log_event_str(" }");
}

void ResourceConfiguration::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (5<param.get_size()) {
      param.error("record value of type @ServiceProfiling_Types.ResourceConfiguration has 5 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) function__id().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) cpu__time().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) cpu__set().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) max__mem().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) sriov().set_param(*param.get_elem(4));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "function_id")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          function__id().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cpu_time")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cpu__time().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cpu_set")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cpu__set().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "max_mem")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          max__mem().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "sriov")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          sriov().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.ResourceConfiguration: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@ServiceProfiling_Types.ResourceConfiguration");
  }
}

void ResourceConfiguration::set_implicit_omit()
{
if (function__id().is_bound()) function__id().set_implicit_omit();
if (cpu__time().is_bound()) cpu__time().set_implicit_omit();
if (cpu__set().is_bound()) cpu__set().set_implicit_omit();
if (max__mem().is_bound()) max__mem().set_implicit_omit();
if (!sriov().is_bound()) sriov() = OMIT_VALUE;
else sriov().set_implicit_omit();
}

void ResourceConfiguration::encode_text(Text_Buf& text_buf) const
{
field_function__id.encode_text(text_buf);
field_cpu__time.encode_text(text_buf);
field_cpu__set.encode_text(text_buf);
field_max__mem.encode_text(text_buf);
field_sriov.encode_text(text_buf);
}

void ResourceConfiguration::decode_text(Text_Buf& text_buf)
{
field_function__id.decode_text(text_buf);
field_cpu__time.decode_text(text_buf);
field_cpu__set.decode_text(text_buf);
field_max__mem.decode_text(text_buf);
field_sriov.decode_text(text_buf);
}

struct ResourceConfiguration_template::single_value_struct {
CHARSTRING_template field_function__id;
CHARSTRING_template field_cpu__time;
CHARSTRING_template field_cpu__set;
CHARSTRING_template field_max__mem;
BOOLEAN_template field_sriov;
};

void ResourceConfiguration_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_function__id = ANY_VALUE;
single_value->field_cpu__time = ANY_VALUE;
single_value->field_cpu__set = ANY_VALUE;
single_value->field_max__mem = ANY_VALUE;
single_value->field_sriov = ANY_OR_OMIT;
}
}
}

void ResourceConfiguration_template::copy_value(const ResourceConfiguration& other_value)
{
single_value = new single_value_struct;
if (other_value.function__id().is_bound()) {
  single_value->field_function__id = other_value.function__id();
} else {
  single_value->field_function__id.clean_up();
}
if (other_value.cpu__time().is_bound()) {
  single_value->field_cpu__time = other_value.cpu__time();
} else {
  single_value->field_cpu__time.clean_up();
}
if (other_value.cpu__set().is_bound()) {
  single_value->field_cpu__set = other_value.cpu__set();
} else {
  single_value->field_cpu__set.clean_up();
}
if (other_value.max__mem().is_bound()) {
  single_value->field_max__mem = other_value.max__mem();
} else {
  single_value->field_max__mem.clean_up();
}
if (other_value.sriov().is_bound()) {
  if (other_value.sriov().ispresent()) single_value->field_sriov = other_value.sriov()();
  else single_value->field_sriov = OMIT_VALUE;
} else {
  single_value->field_sriov.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void ResourceConfiguration_template::copy_template(const ResourceConfiguration_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.function__id().get_selection()) {
single_value->field_function__id = other_value.function__id();
} else {
single_value->field_function__id.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.cpu__time().get_selection()) {
single_value->field_cpu__time = other_value.cpu__time();
} else {
single_value->field_cpu__time.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.cpu__set().get_selection()) {
single_value->field_cpu__set = other_value.cpu__set();
} else {
single_value->field_cpu__set.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.max__mem().get_selection()) {
single_value->field_max__mem = other_value.max__mem();
} else {
single_value->field_max__mem.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.sriov().get_selection()) {
single_value->field_sriov = other_value.sriov();
} else {
single_value->field_sriov.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ResourceConfiguration_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @ServiceProfiling_Types.ResourceConfiguration.");
break;
}
set_selection(other_value);
}

ResourceConfiguration_template::ResourceConfiguration_template()
{
}

ResourceConfiguration_template::ResourceConfiguration_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ResourceConfiguration_template::ResourceConfiguration_template(const ResourceConfiguration& other_value)
{
copy_value(other_value);
}

ResourceConfiguration_template::ResourceConfiguration_template(const OPTIONAL<ResourceConfiguration>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ResourceConfiguration&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @ServiceProfiling_Types.ResourceConfiguration from an unbound optional field.");
}
}

ResourceConfiguration_template::ResourceConfiguration_template(const ResourceConfiguration_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

ResourceConfiguration_template::~ResourceConfiguration_template()
{
clean_up();
}

ResourceConfiguration_template& ResourceConfiguration_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ResourceConfiguration_template& ResourceConfiguration_template::operator=(const ResourceConfiguration& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ResourceConfiguration_template& ResourceConfiguration_template::operator=(const OPTIONAL<ResourceConfiguration>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ResourceConfiguration&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @ServiceProfiling_Types.ResourceConfiguration.");
}
return *this;
}

ResourceConfiguration_template& ResourceConfiguration_template::operator=(const ResourceConfiguration_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ResourceConfiguration_template::match(const ResourceConfiguration& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.function__id().is_bound()) return FALSE;
if(!single_value->field_function__id.match(other_value.function__id(), legacy))return FALSE;
if(!other_value.cpu__time().is_bound()) return FALSE;
if(!single_value->field_cpu__time.match(other_value.cpu__time(), legacy))return FALSE;
if(!other_value.cpu__set().is_bound()) return FALSE;
if(!single_value->field_cpu__set.match(other_value.cpu__set(), legacy))return FALSE;
if(!other_value.max__mem().is_bound()) return FALSE;
if(!single_value->field_max__mem.match(other_value.max__mem(), legacy))return FALSE;
if(!other_value.sriov().is_bound()) return FALSE;
if((other_value.sriov().ispresent() ? !single_value->field_sriov.match((const BOOLEAN&)other_value.sriov(), legacy) : !single_value->field_sriov.match_omit(legacy)))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @ServiceProfiling_Types.ResourceConfiguration.");
}
return FALSE;
}

boolean ResourceConfiguration_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_function__id.is_bound()) return TRUE;
if (single_value->field_cpu__time.is_bound()) return TRUE;
if (single_value->field_cpu__set.is_bound()) return TRUE;
if (single_value->field_max__mem.is_bound()) return TRUE;
if (single_value->field_sriov.is_omit() || single_value->field_sriov.is_bound()) return TRUE;
return FALSE;
}

boolean ResourceConfiguration_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_function__id.is_value()) return FALSE;
if (!single_value->field_cpu__time.is_value()) return FALSE;
if (!single_value->field_cpu__set.is_value()) return FALSE;
if (!single_value->field_max__mem.is_value()) return FALSE;
if (!single_value->field_sriov.is_omit() && !single_value->field_sriov.is_value()) return FALSE;
return TRUE;
}

void ResourceConfiguration_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ResourceConfiguration ResourceConfiguration_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @ServiceProfiling_Types.ResourceConfiguration.");
ResourceConfiguration ret_val;
if (single_value->field_function__id.is_bound()) {
ret_val.function__id() = single_value->field_function__id.valueof();
}
if (single_value->field_cpu__time.is_bound()) {
ret_val.cpu__time() = single_value->field_cpu__time.valueof();
}
if (single_value->field_cpu__set.is_bound()) {
ret_val.cpu__set() = single_value->field_cpu__set.valueof();
}
if (single_value->field_max__mem.is_bound()) {
ret_val.max__mem() = single_value->field_max__mem.valueof();
}
if (single_value->field_sriov.is_omit()) ret_val.sriov() = OMIT_VALUE;
else if (single_value->field_sriov.is_bound()) {
ret_val.sriov() = single_value->field_sriov.valueof();
}
return ret_val;
}

void ResourceConfiguration_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @ServiceProfiling_Types.ResourceConfiguration.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ResourceConfiguration_template[list_length];
}

ResourceConfiguration_template& ResourceConfiguration_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @ServiceProfiling_Types.ResourceConfiguration.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @ServiceProfiling_Types.ResourceConfiguration.");
return value_list.list_value[list_index];
}

CHARSTRING_template& ResourceConfiguration_template::function__id()
{
set_specific();
return single_value->field_function__id;
}

const CHARSTRING_template& ResourceConfiguration_template::function__id() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field function_id of a non-specific template of type @ServiceProfiling_Types.ResourceConfiguration.");
return single_value->field_function__id;
}

CHARSTRING_template& ResourceConfiguration_template::cpu__time()
{
set_specific();
return single_value->field_cpu__time;
}

const CHARSTRING_template& ResourceConfiguration_template::cpu__time() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field cpu_time of a non-specific template of type @ServiceProfiling_Types.ResourceConfiguration.");
return single_value->field_cpu__time;
}

CHARSTRING_template& ResourceConfiguration_template::cpu__set()
{
set_specific();
return single_value->field_cpu__set;
}

const CHARSTRING_template& ResourceConfiguration_template::cpu__set() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field cpu_set of a non-specific template of type @ServiceProfiling_Types.ResourceConfiguration.");
return single_value->field_cpu__set;
}

CHARSTRING_template& ResourceConfiguration_template::max__mem()
{
set_specific();
return single_value->field_max__mem;
}

const CHARSTRING_template& ResourceConfiguration_template::max__mem() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field max_mem of a non-specific template of type @ServiceProfiling_Types.ResourceConfiguration.");
return single_value->field_max__mem;
}

BOOLEAN_template& ResourceConfiguration_template::sriov()
{
set_specific();
return single_value->field_sriov;
}

const BOOLEAN_template& ResourceConfiguration_template::sriov() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field sriov of a non-specific template of type @ServiceProfiling_Types.ResourceConfiguration.");
return single_value->field_sriov;
}

int ResourceConfiguration_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.ResourceConfiguration which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 4;
      if (single_value->field_sriov.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @ServiceProfiling_Types.ResourceConfiguration containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.ResourceConfiguration containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.ResourceConfiguration containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.ResourceConfiguration containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.ResourceConfiguration containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @ServiceProfiling_Types.ResourceConfiguration.");
  }
  return 0;
}

void ResourceConfiguration_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ function_id := ");
single_value->field_function__id.log();
TTCN_Logger::log_event_str(", cpu_time := ");
single_value->field_cpu__time.log();
TTCN_Logger::log_event_str(", cpu_set := ");
single_value->field_cpu__set.log();
TTCN_Logger::log_event_str(", max_mem := ");
single_value->field_max__mem.log();
TTCN_Logger::log_event_str(", sriov := ");
single_value->field_sriov.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ResourceConfiguration_template::log_match(const ResourceConfiguration& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_function__id.match(match_value.function__id(), legacy)){
TTCN_Logger::log_logmatch_info(".function_id");
single_value->field_function__id.log_match(match_value.function__id(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_cpu__time.match(match_value.cpu__time(), legacy)){
TTCN_Logger::log_logmatch_info(".cpu_time");
single_value->field_cpu__time.log_match(match_value.cpu__time(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_cpu__set.match(match_value.cpu__set(), legacy)){
TTCN_Logger::log_logmatch_info(".cpu_set");
single_value->field_cpu__set.log_match(match_value.cpu__set(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_max__mem.match(match_value.max__mem(), legacy)){
TTCN_Logger::log_logmatch_info(".max_mem");
single_value->field_max__mem.log_match(match_value.max__mem(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.sriov().ispresent()){
if(!single_value->field_sriov.match(match_value.sriov(), legacy)){
TTCN_Logger::log_logmatch_info(".sriov");
single_value->field_sriov.log_match(match_value.sriov(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_sriov.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".sriov := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_sriov.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ function_id := ");
single_value->field_function__id.log_match(match_value.function__id(), legacy);
TTCN_Logger::log_event_str(", cpu_time := ");
single_value->field_cpu__time.log_match(match_value.cpu__time(), legacy);
TTCN_Logger::log_event_str(", cpu_set := ");
single_value->field_cpu__set.log_match(match_value.cpu__set(), legacy);
TTCN_Logger::log_event_str(", max_mem := ");
single_value->field_max__mem.log_match(match_value.max__mem(), legacy);
TTCN_Logger::log_event_str(", sriov := ");
if (match_value.sriov().ispresent()) single_value->field_sriov.log_match(match_value.sriov(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_sriov.log();
if (single_value->field_sriov.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ResourceConfiguration_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_function__id.encode_text(text_buf);
single_value->field_cpu__time.encode_text(text_buf);
single_value->field_cpu__set.encode_text(text_buf);
single_value->field_max__mem.encode_text(text_buf);
single_value->field_sriov.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @ServiceProfiling_Types.ResourceConfiguration.");
}
}

void ResourceConfiguration_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_function__id.decode_text(text_buf);
single_value->field_cpu__time.decode_text(text_buf);
single_value->field_cpu__set.decode_text(text_buf);
single_value->field_max__mem.decode_text(text_buf);
single_value->field_sriov.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ResourceConfiguration_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @ServiceProfiling_Types.ResourceConfiguration.");
}
}

void ResourceConfiguration_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ResourceConfiguration_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (5<param.get_size()) {
      param.error("record template of type @ServiceProfiling_Types.ResourceConfiguration has 5 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) function__id().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) cpu__time().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) cpu__set().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) max__mem().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) sriov().set_param(*param.get_elem(4));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "function_id")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          function__id().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cpu_time")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cpu__time().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cpu_set")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cpu__set().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "max_mem")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          max__mem().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "sriov")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          sriov().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.ResourceConfiguration: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@ServiceProfiling_Types.ResourceConfiguration");
  }
  is_ifpresent = param.get_ifpresent();
}

void ResourceConfiguration_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_function__id.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.ResourceConfiguration");
single_value->field_cpu__time.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.ResourceConfiguration");
single_value->field_cpu__set.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.ResourceConfiguration");
single_value->field_max__mem.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.ResourceConfiguration");
single_value->field_sriov.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.ResourceConfiguration");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@ServiceProfiling_Types.ResourceConfiguration");
}

boolean ResourceConfiguration_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ResourceConfiguration_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


const MeasuringPointVNF MeasuringPointVNFs::UNBOUND_ELEM;
MeasuringPointVNFs::MeasuringPointVNFs()
{
val_ptr = NULL;
}

MeasuringPointVNFs::MeasuringPointVNFs(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

MeasuringPointVNFs::MeasuringPointVNFs(const MeasuringPointVNFs& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

MeasuringPointVNFs::~MeasuringPointVNFs()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void MeasuringPointVNFs::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

MeasuringPointVNFs& MeasuringPointVNFs::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

MeasuringPointVNFs& MeasuringPointVNFs::operator=(const MeasuringPointVNFs& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean MeasuringPointVNFs::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
return val_ptr->n_elements == 0 ;
}

boolean MeasuringPointVNFs::operator==(const MeasuringPointVNFs& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

MeasuringPointVNF& MeasuringPointVNFs::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @ServiceProfiling_Types.MeasuringPointVNFs using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (MeasuringPointVNF**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new MeasuringPointVNF(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new MeasuringPointVNF;
}
return *val_ptr->value_elements[index_value];
}

MeasuringPointVNF& MeasuringPointVNFs::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
return (*this)[(int)index_value];
}

const MeasuringPointVNF& MeasuringPointVNFs::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
if (index_value < 0) TTCN_error("Accessing an element of type @ServiceProfiling_Types.MeasuringPointVNFs using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @ServiceProfiling_Types.MeasuringPointVNFs: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const MeasuringPointVNF& MeasuringPointVNFs::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
return (*this)[(int)index_value];
}

MeasuringPointVNFs MeasuringPointVNFs::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

MeasuringPointVNFs MeasuringPointVNFs::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

MeasuringPointVNFs MeasuringPointVNFs::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

MeasuringPointVNFs MeasuringPointVNFs::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
MeasuringPointVNFs ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new MeasuringPointVNF(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

MeasuringPointVNFs MeasuringPointVNFs::operator+(const MeasuringPointVNFs& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @ServiceProfiling_Types.MeasuringPointVNFs concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
MeasuringPointVNFs ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new MeasuringPointVNF(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new MeasuringPointVNF(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

MeasuringPointVNFs MeasuringPointVNFs::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@ServiceProfiling_Types.MeasuringPointVNFs","element");
MeasuringPointVNFs ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new MeasuringPointVNF(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

MeasuringPointVNFs MeasuringPointVNFs::replace(int index, int len, const MeasuringPointVNFs& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
check_replace_arguments(val_ptr->n_elements, index, len, "@ServiceProfiling_Types.MeasuringPointVNFs","element");
MeasuringPointVNFs ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new MeasuringPointVNF(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new MeasuringPointVNF(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new MeasuringPointVNF(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

MeasuringPointVNFs MeasuringPointVNFs::replace(int index, int len, const MeasuringPointVNFs_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void MeasuringPointVNFs::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (MeasuringPointVNF**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new MeasuringPointVNF(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (MeasuringPointVNF**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @ServiceProfiling_Types.MeasuringPointVNFs: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (MeasuringPointVNF**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean MeasuringPointVNFs::is_value() const
{
if (val_ptr == NULL) return FALSE;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int MeasuringPointVNFs::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
return val_ptr->n_elements;
}

int MeasuringPointVNFs::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void MeasuringPointVNFs::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void MeasuringPointVNFs::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
          if (!(*this)[i].is_bound()) {
            delete val_ptr->value_elements[i];
            val_ptr->value_elements[i] = NULL;
          }
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
        if (!(*this)[curr->get_id()->get_index()].is_bound()) {
          delete val_ptr->value_elements[curr->get_id()->get_index()];
          val_ptr->value_elements[curr->get_id()->get_index()] = NULL;
        }
      }
      break;
    default:
      param.type_error("record of value", "@ServiceProfiling_Types.MeasuringPointVNFs");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@ServiceProfiling_Types.MeasuringPointVNFs");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

void MeasuringPointVNFs::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void MeasuringPointVNFs::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void MeasuringPointVNFs::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
val_ptr->value_elements = (MeasuringPointVNF**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new MeasuringPointVNF;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void MeasuringPointVNFs_template::copy_value(const MeasuringPointVNFs& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @ServiceProfiling_Types.MeasuringPointVNFs with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (MeasuringPointVNF_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new MeasuringPointVNF_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new MeasuringPointVNF_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void MeasuringPointVNFs_template::copy_template(const MeasuringPointVNFs_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (MeasuringPointVNF_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new MeasuringPointVNF_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new MeasuringPointVNF_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new MeasuringPointVNFs_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @ServiceProfiling_Types.MeasuringPointVNFs.");
break;
}
set_selection(other_value);
}

boolean MeasuringPointVNFs_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const MeasuringPointVNFs_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const MeasuringPointVNFs*)value_ptr)[value_index], legacy);
else return ((const MeasuringPointVNFs_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

MeasuringPointVNFs_template::MeasuringPointVNFs_template()
{
}

MeasuringPointVNFs_template::MeasuringPointVNFs_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

MeasuringPointVNFs_template::MeasuringPointVNFs_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

MeasuringPointVNFs_template::MeasuringPointVNFs_template(const MeasuringPointVNFs& other_value)
{
copy_value(other_value);
}

MeasuringPointVNFs_template::MeasuringPointVNFs_template(const OPTIONAL<MeasuringPointVNFs>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const MeasuringPointVNFs&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @ServiceProfiling_Types.MeasuringPointVNFs from an unbound optional field.");
}
}

MeasuringPointVNFs_template::MeasuringPointVNFs_template(const MeasuringPointVNFs_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

MeasuringPointVNFs_template::~MeasuringPointVNFs_template()
{
clean_up();
}

void MeasuringPointVNFs_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

MeasuringPointVNFs_template& MeasuringPointVNFs_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

MeasuringPointVNFs_template& MeasuringPointVNFs_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

MeasuringPointVNFs_template& MeasuringPointVNFs_template::operator=(const MeasuringPointVNFs& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

MeasuringPointVNFs_template& MeasuringPointVNFs_template::operator=(const OPTIONAL<MeasuringPointVNFs>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const MeasuringPointVNFs&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @ServiceProfiling_Types.MeasuringPointVNFs.");
}
return *this;
}

MeasuringPointVNFs_template& MeasuringPointVNFs_template::operator=(const MeasuringPointVNFs_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

MeasuringPointVNF_template& MeasuringPointVNFs_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @ServiceProfiling_Types.MeasuringPointVNFs using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @ServiceProfiling_Types.MeasuringPointVNFs.");
    break;
}
return *single_value.value_elements[index_value];
}

MeasuringPointVNF_template& MeasuringPointVNFs_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @ServiceProfiling_Types.MeasuringPointVNFs.");
return (*this)[(int)index_value];
}

const MeasuringPointVNF_template& MeasuringPointVNFs_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @ServiceProfiling_Types.MeasuringPointVNFs using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @ServiceProfiling_Types.MeasuringPointVNFs.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @ServiceProfiling_Types.MeasuringPointVNFs: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const MeasuringPointVNF_template& MeasuringPointVNFs_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @ServiceProfiling_Types.MeasuringPointVNFs.");
return (*this)[(int)index_value];
}

void MeasuringPointVNFs_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @ServiceProfiling_Types.MeasuringPointVNFs.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (MeasuringPointVNF_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new MeasuringPointVNF_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new MeasuringPointVNF_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (MeasuringPointVNF_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int MeasuringPointVNFs_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int MeasuringPointVNFs_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @ServiceProfiling_Types.MeasuringPointVNFs which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @ServiceProfiling_Types.MeasuringPointVNFs containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @ServiceProfiling_Types.MeasuringPointVNFs containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @ServiceProfiling_Types.MeasuringPointVNFs containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @ServiceProfiling_Types.MeasuringPointVNFs containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @ServiceProfiling_Types.MeasuringPointVNFs containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @ServiceProfiling_Types.MeasuringPointVNFs.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @ServiceProfiling_Types.MeasuringPointVNFs");
}

boolean MeasuringPointVNFs_template::match(const MeasuringPointVNFs& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @ServiceProfiling_Types.MeasuringPointVNFs.");
}
return FALSE;
}

boolean MeasuringPointVNFs_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return FALSE;
return TRUE;
}

MeasuringPointVNFs MeasuringPointVNFs_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @ServiceProfiling_Types.MeasuringPointVNFs.");
MeasuringPointVNFs ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

MeasuringPointVNFs MeasuringPointVNFs_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

MeasuringPointVNFs MeasuringPointVNFs_template::replace(int index, int len, const MeasuringPointVNFs_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

MeasuringPointVNFs MeasuringPointVNFs_template::replace(int index, int len, const MeasuringPointVNFs& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void MeasuringPointVNFs_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new MeasuringPointVNFs_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @ServiceProfiling_Types.MeasuringPointVNFs.");
}
set_selection(template_type);
}

MeasuringPointVNFs_template& MeasuringPointVNFs_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @ServiceProfiling_Types.MeasuringPointVNFs.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @ServiceProfiling_Types.MeasuringPointVNFs.");
return value_list.list_value[list_index];
}

void MeasuringPointVNFs_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void MeasuringPointVNFs_template::log_match(const MeasuringPointVNFs& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void MeasuringPointVNFs_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @ServiceProfiling_Types.MeasuringPointVNFs.");
}
}

void MeasuringPointVNFs_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @ServiceProfiling_Types.MeasuringPointVNFs.");
single_value.value_elements = (MeasuringPointVNF_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new MeasuringPointVNF_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new MeasuringPointVNFs_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @ServiceProfiling_Types.MeasuringPointVNFs.");
}
}

boolean MeasuringPointVNFs_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean MeasuringPointVNFs_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void MeasuringPointVNFs_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    MeasuringPointVNFs_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@ServiceProfiling_Types.MeasuringPointVNFs");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void MeasuringPointVNFs_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.MeasuringPointVNFs");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@ServiceProfiling_Types.MeasuringPointVNFs");
}

boolean MeasuringPointVNFs_template::get_istemplate_kind(const char* type) const {
if (!strcmp(type, "AnyElement")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_VALUE) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "AnyElementsOrNone")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_OR_OMIT) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "permutation")) {
  return number_of_permutations;
} else if (!strcmp(type, "length")) {
  return length_restriction_type != NO_LENGTH_RESTRICTION;
} else {
  return Base_Template::get_istemplate_kind(type);
}
}
MeasuringPointVNF::MeasuringPointVNF()
{
}

MeasuringPointVNF::MeasuringPointVNF(const CHARSTRING& par_name,
    const CHARSTRING& par_connection__point,
    const CHARSTRING& par_image,
    const OPTIONAL<CHARSTRING>& par_cmd)
  :   field_name(par_name),
  field_connection__point(par_connection__point),
  field_image(par_image),
  field_cmd(par_cmd)
{
}

MeasuringPointVNF::MeasuringPointVNF(const MeasuringPointVNF& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @ServiceProfiling_Types.MeasuringPointVNF.");
if (other_value.name().is_bound()) field_name = other_value.name();
else field_name.clean_up();
if (other_value.connection__point().is_bound()) field_connection__point = other_value.connection__point();
else field_connection__point.clean_up();
if (other_value.image().is_bound()) field_image = other_value.image();
else field_image.clean_up();
if (other_value.cmd().is_bound()) field_cmd = other_value.cmd();
else field_cmd.clean_up();
}

void MeasuringPointVNF::clean_up()
{
field_name.clean_up();
field_connection__point.clean_up();
field_image.clean_up();
field_cmd.clean_up();
}

MeasuringPointVNF& MeasuringPointVNF::operator=(const MeasuringPointVNF& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @ServiceProfiling_Types.MeasuringPointVNF.");
  if (other_value.name().is_bound()) field_name = other_value.name();
  else field_name.clean_up();
  if (other_value.connection__point().is_bound()) field_connection__point = other_value.connection__point();
  else field_connection__point.clean_up();
  if (other_value.image().is_bound()) field_image = other_value.image();
  else field_image.clean_up();
  if (other_value.cmd().is_bound()) field_cmd = other_value.cmd();
  else field_cmd.clean_up();
}
return *this;
}

boolean MeasuringPointVNF::operator==(const MeasuringPointVNF& other_value) const
{
return field_name==other_value.field_name
  && field_connection__point==other_value.field_connection__point
  && field_image==other_value.field_image
  && field_cmd==other_value.field_cmd;
}

boolean MeasuringPointVNF::is_bound() const
{
if(field_name.is_bound()) return TRUE;
if(field_connection__point.is_bound()) return TRUE;
if(field_image.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_cmd.get_selection() || field_cmd.is_bound()) return TRUE;
return FALSE;
}
boolean MeasuringPointVNF::is_value() const
{
if(!field_name.is_value()) return FALSE;
if(!field_connection__point.is_value()) return FALSE;
if(!field_image.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_cmd.get_selection() && !field_cmd.is_value()) return FALSE;
return TRUE;
}
int MeasuringPointVNF::size_of() const
{
  int ret_val = 3;
  if (field_cmd.ispresent()) ret_val++;
  return ret_val;
}

void MeasuringPointVNF::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ name := ");
field_name.log();
TTCN_Logger::log_event_str(", connection_point := ");
field_connection__point.log();
TTCN_Logger::log_event_str(", image := ");
field_image.log();
TTCN_Logger::log_event_str(", cmd := ");
field_cmd.log();
TTCN_Logger::log_event_str(" }");
}

void MeasuringPointVNF::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record value of type @ServiceProfiling_Types.MeasuringPointVNF has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) connection__point().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) image().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) cmd().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "connection_point")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          connection__point().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "image")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          image().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cmd")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cmd().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.MeasuringPointVNF: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@ServiceProfiling_Types.MeasuringPointVNF");
  }
}

void MeasuringPointVNF::set_implicit_omit()
{
if (name().is_bound()) name().set_implicit_omit();
if (connection__point().is_bound()) connection__point().set_implicit_omit();
if (image().is_bound()) image().set_implicit_omit();
if (!cmd().is_bound()) cmd() = OMIT_VALUE;
else cmd().set_implicit_omit();
}

void MeasuringPointVNF::encode_text(Text_Buf& text_buf) const
{
field_name.encode_text(text_buf);
field_connection__point.encode_text(text_buf);
field_image.encode_text(text_buf);
field_cmd.encode_text(text_buf);
}

void MeasuringPointVNF::decode_text(Text_Buf& text_buf)
{
field_name.decode_text(text_buf);
field_connection__point.decode_text(text_buf);
field_image.decode_text(text_buf);
field_cmd.decode_text(text_buf);
}

struct MeasuringPointVNF_template::single_value_struct {
CHARSTRING_template field_name;
CHARSTRING_template field_connection__point;
CHARSTRING_template field_image;
CHARSTRING_template field_cmd;
};

void MeasuringPointVNF_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_name = ANY_VALUE;
single_value->field_connection__point = ANY_VALUE;
single_value->field_image = ANY_VALUE;
single_value->field_cmd = ANY_OR_OMIT;
}
}
}

void MeasuringPointVNF_template::copy_value(const MeasuringPointVNF& other_value)
{
single_value = new single_value_struct;
if (other_value.name().is_bound()) {
  single_value->field_name = other_value.name();
} else {
  single_value->field_name.clean_up();
}
if (other_value.connection__point().is_bound()) {
  single_value->field_connection__point = other_value.connection__point();
} else {
  single_value->field_connection__point.clean_up();
}
if (other_value.image().is_bound()) {
  single_value->field_image = other_value.image();
} else {
  single_value->field_image.clean_up();
}
if (other_value.cmd().is_bound()) {
  if (other_value.cmd().ispresent()) single_value->field_cmd = other_value.cmd()();
  else single_value->field_cmd = OMIT_VALUE;
} else {
  single_value->field_cmd.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void MeasuringPointVNF_template::copy_template(const MeasuringPointVNF_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.name().get_selection()) {
single_value->field_name = other_value.name();
} else {
single_value->field_name.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.connection__point().get_selection()) {
single_value->field_connection__point = other_value.connection__point();
} else {
single_value->field_connection__point.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.image().get_selection()) {
single_value->field_image = other_value.image();
} else {
single_value->field_image.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.cmd().get_selection()) {
single_value->field_cmd = other_value.cmd();
} else {
single_value->field_cmd.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new MeasuringPointVNF_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @ServiceProfiling_Types.MeasuringPointVNF.");
break;
}
set_selection(other_value);
}

MeasuringPointVNF_template::MeasuringPointVNF_template()
{
}

MeasuringPointVNF_template::MeasuringPointVNF_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

MeasuringPointVNF_template::MeasuringPointVNF_template(const MeasuringPointVNF& other_value)
{
copy_value(other_value);
}

MeasuringPointVNF_template::MeasuringPointVNF_template(const OPTIONAL<MeasuringPointVNF>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const MeasuringPointVNF&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @ServiceProfiling_Types.MeasuringPointVNF from an unbound optional field.");
}
}

MeasuringPointVNF_template::MeasuringPointVNF_template(const MeasuringPointVNF_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

MeasuringPointVNF_template::~MeasuringPointVNF_template()
{
clean_up();
}

MeasuringPointVNF_template& MeasuringPointVNF_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

MeasuringPointVNF_template& MeasuringPointVNF_template::operator=(const MeasuringPointVNF& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

MeasuringPointVNF_template& MeasuringPointVNF_template::operator=(const OPTIONAL<MeasuringPointVNF>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const MeasuringPointVNF&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @ServiceProfiling_Types.MeasuringPointVNF.");
}
return *this;
}

MeasuringPointVNF_template& MeasuringPointVNF_template::operator=(const MeasuringPointVNF_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean MeasuringPointVNF_template::match(const MeasuringPointVNF& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.name().is_bound()) return FALSE;
if(!single_value->field_name.match(other_value.name(), legacy))return FALSE;
if(!other_value.connection__point().is_bound()) return FALSE;
if(!single_value->field_connection__point.match(other_value.connection__point(), legacy))return FALSE;
if(!other_value.image().is_bound()) return FALSE;
if(!single_value->field_image.match(other_value.image(), legacy))return FALSE;
if(!other_value.cmd().is_bound()) return FALSE;
if((other_value.cmd().ispresent() ? !single_value->field_cmd.match((const CHARSTRING&)other_value.cmd(), legacy) : !single_value->field_cmd.match_omit(legacy)))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @ServiceProfiling_Types.MeasuringPointVNF.");
}
return FALSE;
}

boolean MeasuringPointVNF_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_name.is_bound()) return TRUE;
if (single_value->field_connection__point.is_bound()) return TRUE;
if (single_value->field_image.is_bound()) return TRUE;
if (single_value->field_cmd.is_omit() || single_value->field_cmd.is_bound()) return TRUE;
return FALSE;
}

boolean MeasuringPointVNF_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_name.is_value()) return FALSE;
if (!single_value->field_connection__point.is_value()) return FALSE;
if (!single_value->field_image.is_value()) return FALSE;
if (!single_value->field_cmd.is_omit() && !single_value->field_cmd.is_value()) return FALSE;
return TRUE;
}

void MeasuringPointVNF_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

MeasuringPointVNF MeasuringPointVNF_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @ServiceProfiling_Types.MeasuringPointVNF.");
MeasuringPointVNF ret_val;
if (single_value->field_name.is_bound()) {
ret_val.name() = single_value->field_name.valueof();
}
if (single_value->field_connection__point.is_bound()) {
ret_val.connection__point() = single_value->field_connection__point.valueof();
}
if (single_value->field_image.is_bound()) {
ret_val.image() = single_value->field_image.valueof();
}
if (single_value->field_cmd.is_omit()) ret_val.cmd() = OMIT_VALUE;
else if (single_value->field_cmd.is_bound()) {
ret_val.cmd() = single_value->field_cmd.valueof();
}
return ret_val;
}

void MeasuringPointVNF_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @ServiceProfiling_Types.MeasuringPointVNF.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new MeasuringPointVNF_template[list_length];
}

MeasuringPointVNF_template& MeasuringPointVNF_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @ServiceProfiling_Types.MeasuringPointVNF.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @ServiceProfiling_Types.MeasuringPointVNF.");
return value_list.list_value[list_index];
}

CHARSTRING_template& MeasuringPointVNF_template::name()
{
set_specific();
return single_value->field_name;
}

const CHARSTRING_template& MeasuringPointVNF_template::name() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field name of a non-specific template of type @ServiceProfiling_Types.MeasuringPointVNF.");
return single_value->field_name;
}

CHARSTRING_template& MeasuringPointVNF_template::connection__point()
{
set_specific();
return single_value->field_connection__point;
}

const CHARSTRING_template& MeasuringPointVNF_template::connection__point() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field connection_point of a non-specific template of type @ServiceProfiling_Types.MeasuringPointVNF.");
return single_value->field_connection__point;
}

CHARSTRING_template& MeasuringPointVNF_template::image()
{
set_specific();
return single_value->field_image;
}

const CHARSTRING_template& MeasuringPointVNF_template::image() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field image of a non-specific template of type @ServiceProfiling_Types.MeasuringPointVNF.");
return single_value->field_image;
}

CHARSTRING_template& MeasuringPointVNF_template::cmd()
{
set_specific();
return single_value->field_cmd;
}

const CHARSTRING_template& MeasuringPointVNF_template::cmd() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field cmd of a non-specific template of type @ServiceProfiling_Types.MeasuringPointVNF.");
return single_value->field_cmd;
}

int MeasuringPointVNF_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.MeasuringPointVNF which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 3;
      if (single_value->field_cmd.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @ServiceProfiling_Types.MeasuringPointVNF containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.MeasuringPointVNF containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.MeasuringPointVNF containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.MeasuringPointVNF containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.MeasuringPointVNF containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @ServiceProfiling_Types.MeasuringPointVNF.");
  }
  return 0;
}

void MeasuringPointVNF_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ name := ");
single_value->field_name.log();
TTCN_Logger::log_event_str(", connection_point := ");
single_value->field_connection__point.log();
TTCN_Logger::log_event_str(", image := ");
single_value->field_image.log();
TTCN_Logger::log_event_str(", cmd := ");
single_value->field_cmd.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void MeasuringPointVNF_template::log_match(const MeasuringPointVNF& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_name.match(match_value.name(), legacy)){
TTCN_Logger::log_logmatch_info(".name");
single_value->field_name.log_match(match_value.name(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_connection__point.match(match_value.connection__point(), legacy)){
TTCN_Logger::log_logmatch_info(".connection_point");
single_value->field_connection__point.log_match(match_value.connection__point(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_image.match(match_value.image(), legacy)){
TTCN_Logger::log_logmatch_info(".image");
single_value->field_image.log_match(match_value.image(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.cmd().ispresent()){
if(!single_value->field_cmd.match(match_value.cmd(), legacy)){
TTCN_Logger::log_logmatch_info(".cmd");
single_value->field_cmd.log_match(match_value.cmd(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_cmd.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".cmd := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_cmd.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ name := ");
single_value->field_name.log_match(match_value.name(), legacy);
TTCN_Logger::log_event_str(", connection_point := ");
single_value->field_connection__point.log_match(match_value.connection__point(), legacy);
TTCN_Logger::log_event_str(", image := ");
single_value->field_image.log_match(match_value.image(), legacy);
TTCN_Logger::log_event_str(", cmd := ");
if (match_value.cmd().ispresent()) single_value->field_cmd.log_match(match_value.cmd(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_cmd.log();
if (single_value->field_cmd.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void MeasuringPointVNF_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_name.encode_text(text_buf);
single_value->field_connection__point.encode_text(text_buf);
single_value->field_image.encode_text(text_buf);
single_value->field_cmd.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @ServiceProfiling_Types.MeasuringPointVNF.");
}
}

void MeasuringPointVNF_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_name.decode_text(text_buf);
single_value->field_connection__point.decode_text(text_buf);
single_value->field_image.decode_text(text_buf);
single_value->field_cmd.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new MeasuringPointVNF_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @ServiceProfiling_Types.MeasuringPointVNF.");
}
}

void MeasuringPointVNF_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    MeasuringPointVNF_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record template of type @ServiceProfiling_Types.MeasuringPointVNF has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) connection__point().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) image().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) cmd().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "connection_point")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          connection__point().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "image")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          image().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cmd")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cmd().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.MeasuringPointVNF: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@ServiceProfiling_Types.MeasuringPointVNF");
  }
  is_ifpresent = param.get_ifpresent();
}

void MeasuringPointVNF_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_name.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.MeasuringPointVNF");
single_value->field_connection__point.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.MeasuringPointVNF");
single_value->field_image.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.MeasuringPointVNF");
single_value->field_cmd.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.MeasuringPointVNF");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@ServiceProfiling_Types.MeasuringPointVNF");
}

boolean MeasuringPointVNF_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean MeasuringPointVNF_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

ServiceProfilingExperiment::ServiceProfilingExperiment()
{
}

ServiceProfilingExperiment::ServiceProfilingExperiment(const CHARSTRING& par_name,
    const INTEGER& par_repetitions,
    const INTEGER& par_profiling__timeout,
    const CHARSTRING& par_service__name,
    const ResourceConfigurations& par_resourcecfgs,
    const MeasuringPointVNFs& par_MpVNFs)
  :   field_name(par_name),
  field_repetitions(par_repetitions),
  field_profiling__timeout(par_profiling__timeout),
  field_service__name(par_service__name),
  field_resourcecfgs(par_resourcecfgs),
  field_MpVNFs(par_MpVNFs)
{
}

ServiceProfilingExperiment::ServiceProfilingExperiment(const ServiceProfilingExperiment& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
if (other_value.name().is_bound()) field_name = other_value.name();
else field_name.clean_up();
if (other_value.repetitions().is_bound()) field_repetitions = other_value.repetitions();
else field_repetitions.clean_up();
if (other_value.profiling__timeout().is_bound()) field_profiling__timeout = other_value.profiling__timeout();
else field_profiling__timeout.clean_up();
if (other_value.service__name().is_bound()) field_service__name = other_value.service__name();
else field_service__name.clean_up();
if (other_value.resourcecfgs().is_bound()) field_resourcecfgs = other_value.resourcecfgs();
else field_resourcecfgs.clean_up();
if (other_value.MpVNFs().is_bound()) field_MpVNFs = other_value.MpVNFs();
else field_MpVNFs.clean_up();
}

void ServiceProfilingExperiment::clean_up()
{
field_name.clean_up();
field_repetitions.clean_up();
field_profiling__timeout.clean_up();
field_service__name.clean_up();
field_resourcecfgs.clean_up();
field_MpVNFs.clean_up();
}

ServiceProfilingExperiment& ServiceProfilingExperiment::operator=(const ServiceProfilingExperiment& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
  if (other_value.name().is_bound()) field_name = other_value.name();
  else field_name.clean_up();
  if (other_value.repetitions().is_bound()) field_repetitions = other_value.repetitions();
  else field_repetitions.clean_up();
  if (other_value.profiling__timeout().is_bound()) field_profiling__timeout = other_value.profiling__timeout();
  else field_profiling__timeout.clean_up();
  if (other_value.service__name().is_bound()) field_service__name = other_value.service__name();
  else field_service__name.clean_up();
  if (other_value.resourcecfgs().is_bound()) field_resourcecfgs = other_value.resourcecfgs();
  else field_resourcecfgs.clean_up();
  if (other_value.MpVNFs().is_bound()) field_MpVNFs = other_value.MpVNFs();
  else field_MpVNFs.clean_up();
}
return *this;
}

boolean ServiceProfilingExperiment::operator==(const ServiceProfilingExperiment& other_value) const
{
return field_name==other_value.field_name
  && field_repetitions==other_value.field_repetitions
  && field_profiling__timeout==other_value.field_profiling__timeout
  && field_service__name==other_value.field_service__name
  && field_resourcecfgs==other_value.field_resourcecfgs
  && field_MpVNFs==other_value.field_MpVNFs;
}

boolean ServiceProfilingExperiment::is_bound() const
{
if(field_name.is_bound()) return TRUE;
if(field_repetitions.is_bound()) return TRUE;
if(field_profiling__timeout.is_bound()) return TRUE;
if(field_service__name.is_bound()) return TRUE;
if(field_resourcecfgs.is_bound()) return TRUE;
if(field_MpVNFs.is_bound()) return TRUE;
return FALSE;
}
boolean ServiceProfilingExperiment::is_value() const
{
if(!field_name.is_value()) return FALSE;
if(!field_repetitions.is_value()) return FALSE;
if(!field_profiling__timeout.is_value()) return FALSE;
if(!field_service__name.is_value()) return FALSE;
if(!field_resourcecfgs.is_value()) return FALSE;
if(!field_MpVNFs.is_value()) return FALSE;
return TRUE;
}
void ServiceProfilingExperiment::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ name := ");
field_name.log();
TTCN_Logger::log_event_str(", repetitions := ");
field_repetitions.log();
TTCN_Logger::log_event_str(", profiling_timeout := ");
field_profiling__timeout.log();
TTCN_Logger::log_event_str(", service_name := ");
field_service__name.log();
TTCN_Logger::log_event_str(", resourcecfgs := ");
field_resourcecfgs.log();
TTCN_Logger::log_event_str(", MpVNFs := ");
field_MpVNFs.log();
TTCN_Logger::log_event_str(" }");
}

void ServiceProfilingExperiment::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (6<param.get_size()) {
      param.error("record value of type @ServiceProfiling_Types.ServiceProfilingExperiment has 6 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) repetitions().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) profiling__timeout().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) service__name().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) resourcecfgs().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) MpVNFs().set_param(*param.get_elem(5));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "repetitions")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          repetitions().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "profiling_timeout")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          profiling__timeout().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "service_name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          service__name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "resourcecfgs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          resourcecfgs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "MpVNFs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          MpVNFs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.ServiceProfilingExperiment: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@ServiceProfiling_Types.ServiceProfilingExperiment");
  }
}

void ServiceProfilingExperiment::set_implicit_omit()
{
if (name().is_bound()) name().set_implicit_omit();
if (repetitions().is_bound()) repetitions().set_implicit_omit();
if (profiling__timeout().is_bound()) profiling__timeout().set_implicit_omit();
if (service__name().is_bound()) service__name().set_implicit_omit();
if (resourcecfgs().is_bound()) resourcecfgs().set_implicit_omit();
if (MpVNFs().is_bound()) MpVNFs().set_implicit_omit();
}

void ServiceProfilingExperiment::encode_text(Text_Buf& text_buf) const
{
field_name.encode_text(text_buf);
field_repetitions.encode_text(text_buf);
field_profiling__timeout.encode_text(text_buf);
field_service__name.encode_text(text_buf);
field_resourcecfgs.encode_text(text_buf);
field_MpVNFs.encode_text(text_buf);
}

void ServiceProfilingExperiment::decode_text(Text_Buf& text_buf)
{
field_name.decode_text(text_buf);
field_repetitions.decode_text(text_buf);
field_profiling__timeout.decode_text(text_buf);
field_service__name.decode_text(text_buf);
field_resourcecfgs.decode_text(text_buf);
field_MpVNFs.decode_text(text_buf);
}

struct ServiceProfilingExperiment_template::single_value_struct {
CHARSTRING_template field_name;
INTEGER_template field_repetitions;
INTEGER_template field_profiling__timeout;
CHARSTRING_template field_service__name;
ResourceConfigurations_template field_resourcecfgs;
MeasuringPointVNFs_template field_MpVNFs;
};

void ServiceProfilingExperiment_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_name = ANY_VALUE;
single_value->field_repetitions = ANY_VALUE;
single_value->field_profiling__timeout = ANY_VALUE;
single_value->field_service__name = ANY_VALUE;
single_value->field_resourcecfgs = ANY_VALUE;
single_value->field_MpVNFs = ANY_VALUE;
}
}
}

void ServiceProfilingExperiment_template::copy_value(const ServiceProfilingExperiment& other_value)
{
single_value = new single_value_struct;
if (other_value.name().is_bound()) {
  single_value->field_name = other_value.name();
} else {
  single_value->field_name.clean_up();
}
if (other_value.repetitions().is_bound()) {
  single_value->field_repetitions = other_value.repetitions();
} else {
  single_value->field_repetitions.clean_up();
}
if (other_value.profiling__timeout().is_bound()) {
  single_value->field_profiling__timeout = other_value.profiling__timeout();
} else {
  single_value->field_profiling__timeout.clean_up();
}
if (other_value.service__name().is_bound()) {
  single_value->field_service__name = other_value.service__name();
} else {
  single_value->field_service__name.clean_up();
}
if (other_value.resourcecfgs().is_bound()) {
  single_value->field_resourcecfgs = other_value.resourcecfgs();
} else {
  single_value->field_resourcecfgs.clean_up();
}
if (other_value.MpVNFs().is_bound()) {
  single_value->field_MpVNFs = other_value.MpVNFs();
} else {
  single_value->field_MpVNFs.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void ServiceProfilingExperiment_template::copy_template(const ServiceProfilingExperiment_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.name().get_selection()) {
single_value->field_name = other_value.name();
} else {
single_value->field_name.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.repetitions().get_selection()) {
single_value->field_repetitions = other_value.repetitions();
} else {
single_value->field_repetitions.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.profiling__timeout().get_selection()) {
single_value->field_profiling__timeout = other_value.profiling__timeout();
} else {
single_value->field_profiling__timeout.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.service__name().get_selection()) {
single_value->field_service__name = other_value.service__name();
} else {
single_value->field_service__name.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.resourcecfgs().get_selection()) {
single_value->field_resourcecfgs = other_value.resourcecfgs();
} else {
single_value->field_resourcecfgs.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.MpVNFs().get_selection()) {
single_value->field_MpVNFs = other_value.MpVNFs();
} else {
single_value->field_MpVNFs.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ServiceProfilingExperiment_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
break;
}
set_selection(other_value);
}

ServiceProfilingExperiment_template::ServiceProfilingExperiment_template()
{
}

ServiceProfilingExperiment_template::ServiceProfilingExperiment_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ServiceProfilingExperiment_template::ServiceProfilingExperiment_template(const ServiceProfilingExperiment& other_value)
{
copy_value(other_value);
}

ServiceProfilingExperiment_template::ServiceProfilingExperiment_template(const OPTIONAL<ServiceProfilingExperiment>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ServiceProfilingExperiment&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @ServiceProfiling_Types.ServiceProfilingExperiment from an unbound optional field.");
}
}

ServiceProfilingExperiment_template::ServiceProfilingExperiment_template(const ServiceProfilingExperiment_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

ServiceProfilingExperiment_template::~ServiceProfilingExperiment_template()
{
clean_up();
}

ServiceProfilingExperiment_template& ServiceProfilingExperiment_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ServiceProfilingExperiment_template& ServiceProfilingExperiment_template::operator=(const ServiceProfilingExperiment& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ServiceProfilingExperiment_template& ServiceProfilingExperiment_template::operator=(const OPTIONAL<ServiceProfilingExperiment>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ServiceProfilingExperiment&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
}
return *this;
}

ServiceProfilingExperiment_template& ServiceProfilingExperiment_template::operator=(const ServiceProfilingExperiment_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ServiceProfilingExperiment_template::match(const ServiceProfilingExperiment& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.name().is_bound()) return FALSE;
if(!single_value->field_name.match(other_value.name(), legacy))return FALSE;
if(!other_value.repetitions().is_bound()) return FALSE;
if(!single_value->field_repetitions.match(other_value.repetitions(), legacy))return FALSE;
if(!other_value.profiling__timeout().is_bound()) return FALSE;
if(!single_value->field_profiling__timeout.match(other_value.profiling__timeout(), legacy))return FALSE;
if(!other_value.service__name().is_bound()) return FALSE;
if(!single_value->field_service__name.match(other_value.service__name(), legacy))return FALSE;
if(!other_value.resourcecfgs().is_bound()) return FALSE;
if(!single_value->field_resourcecfgs.match(other_value.resourcecfgs(), legacy))return FALSE;
if(!other_value.MpVNFs().is_bound()) return FALSE;
if(!single_value->field_MpVNFs.match(other_value.MpVNFs(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
}
return FALSE;
}

boolean ServiceProfilingExperiment_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_name.is_bound()) return TRUE;
if (single_value->field_repetitions.is_bound()) return TRUE;
if (single_value->field_profiling__timeout.is_bound()) return TRUE;
if (single_value->field_service__name.is_bound()) return TRUE;
if (single_value->field_resourcecfgs.is_bound()) return TRUE;
if (single_value->field_MpVNFs.is_bound()) return TRUE;
return FALSE;
}

boolean ServiceProfilingExperiment_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_name.is_value()) return FALSE;
if (!single_value->field_repetitions.is_value()) return FALSE;
if (!single_value->field_profiling__timeout.is_value()) return FALSE;
if (!single_value->field_service__name.is_value()) return FALSE;
if (!single_value->field_resourcecfgs.is_value()) return FALSE;
if (!single_value->field_MpVNFs.is_value()) return FALSE;
return TRUE;
}

void ServiceProfilingExperiment_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ServiceProfilingExperiment ServiceProfilingExperiment_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
ServiceProfilingExperiment ret_val;
if (single_value->field_name.is_bound()) {
ret_val.name() = single_value->field_name.valueof();
}
if (single_value->field_repetitions.is_bound()) {
ret_val.repetitions() = single_value->field_repetitions.valueof();
}
if (single_value->field_profiling__timeout.is_bound()) {
ret_val.profiling__timeout() = single_value->field_profiling__timeout.valueof();
}
if (single_value->field_service__name.is_bound()) {
ret_val.service__name() = single_value->field_service__name.valueof();
}
if (single_value->field_resourcecfgs.is_bound()) {
ret_val.resourcecfgs() = single_value->field_resourcecfgs.valueof();
}
if (single_value->field_MpVNFs.is_bound()) {
ret_val.MpVNFs() = single_value->field_MpVNFs.valueof();
}
return ret_val;
}

void ServiceProfilingExperiment_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ServiceProfilingExperiment_template[list_length];
}

ServiceProfilingExperiment_template& ServiceProfilingExperiment_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
return value_list.list_value[list_index];
}

CHARSTRING_template& ServiceProfilingExperiment_template::name()
{
set_specific();
return single_value->field_name;
}

const CHARSTRING_template& ServiceProfilingExperiment_template::name() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field name of a non-specific template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
return single_value->field_name;
}

INTEGER_template& ServiceProfilingExperiment_template::repetitions()
{
set_specific();
return single_value->field_repetitions;
}

const INTEGER_template& ServiceProfilingExperiment_template::repetitions() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field repetitions of a non-specific template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
return single_value->field_repetitions;
}

INTEGER_template& ServiceProfilingExperiment_template::profiling__timeout()
{
set_specific();
return single_value->field_profiling__timeout;
}

const INTEGER_template& ServiceProfilingExperiment_template::profiling__timeout() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field profiling_timeout of a non-specific template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
return single_value->field_profiling__timeout;
}

CHARSTRING_template& ServiceProfilingExperiment_template::service__name()
{
set_specific();
return single_value->field_service__name;
}

const CHARSTRING_template& ServiceProfilingExperiment_template::service__name() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field service_name of a non-specific template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
return single_value->field_service__name;
}

ResourceConfigurations_template& ServiceProfilingExperiment_template::resourcecfgs()
{
set_specific();
return single_value->field_resourcecfgs;
}

const ResourceConfigurations_template& ServiceProfilingExperiment_template::resourcecfgs() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field resourcecfgs of a non-specific template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
return single_value->field_resourcecfgs;
}

MeasuringPointVNFs_template& ServiceProfilingExperiment_template::MpVNFs()
{
set_specific();
return single_value->field_MpVNFs;
}

const MeasuringPointVNFs_template& ServiceProfilingExperiment_template::MpVNFs() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field MpVNFs of a non-specific template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
return single_value->field_MpVNFs;
}

int ServiceProfilingExperiment_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.ServiceProfilingExperiment which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 6;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @ServiceProfiling_Types.ServiceProfilingExperiment containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.ServiceProfilingExperiment containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.ServiceProfilingExperiment containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.ServiceProfilingExperiment containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.ServiceProfilingExperiment containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
  }
  return 0;
}

void ServiceProfilingExperiment_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ name := ");
single_value->field_name.log();
TTCN_Logger::log_event_str(", repetitions := ");
single_value->field_repetitions.log();
TTCN_Logger::log_event_str(", profiling_timeout := ");
single_value->field_profiling__timeout.log();
TTCN_Logger::log_event_str(", service_name := ");
single_value->field_service__name.log();
TTCN_Logger::log_event_str(", resourcecfgs := ");
single_value->field_resourcecfgs.log();
TTCN_Logger::log_event_str(", MpVNFs := ");
single_value->field_MpVNFs.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ServiceProfilingExperiment_template::log_match(const ServiceProfilingExperiment& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_name.match(match_value.name(), legacy)){
TTCN_Logger::log_logmatch_info(".name");
single_value->field_name.log_match(match_value.name(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_repetitions.match(match_value.repetitions(), legacy)){
TTCN_Logger::log_logmatch_info(".repetitions");
single_value->field_repetitions.log_match(match_value.repetitions(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_profiling__timeout.match(match_value.profiling__timeout(), legacy)){
TTCN_Logger::log_logmatch_info(".profiling_timeout");
single_value->field_profiling__timeout.log_match(match_value.profiling__timeout(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_service__name.match(match_value.service__name(), legacy)){
TTCN_Logger::log_logmatch_info(".service_name");
single_value->field_service__name.log_match(match_value.service__name(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_resourcecfgs.match(match_value.resourcecfgs(), legacy)){
TTCN_Logger::log_logmatch_info(".resourcecfgs");
single_value->field_resourcecfgs.log_match(match_value.resourcecfgs(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_MpVNFs.match(match_value.MpVNFs(), legacy)){
TTCN_Logger::log_logmatch_info(".MpVNFs");
single_value->field_MpVNFs.log_match(match_value.MpVNFs(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ name := ");
single_value->field_name.log_match(match_value.name(), legacy);
TTCN_Logger::log_event_str(", repetitions := ");
single_value->field_repetitions.log_match(match_value.repetitions(), legacy);
TTCN_Logger::log_event_str(", profiling_timeout := ");
single_value->field_profiling__timeout.log_match(match_value.profiling__timeout(), legacy);
TTCN_Logger::log_event_str(", service_name := ");
single_value->field_service__name.log_match(match_value.service__name(), legacy);
TTCN_Logger::log_event_str(", resourcecfgs := ");
single_value->field_resourcecfgs.log_match(match_value.resourcecfgs(), legacy);
TTCN_Logger::log_event_str(", MpVNFs := ");
single_value->field_MpVNFs.log_match(match_value.MpVNFs(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ServiceProfilingExperiment_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_name.encode_text(text_buf);
single_value->field_repetitions.encode_text(text_buf);
single_value->field_profiling__timeout.encode_text(text_buf);
single_value->field_service__name.encode_text(text_buf);
single_value->field_resourcecfgs.encode_text(text_buf);
single_value->field_MpVNFs.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
}
}

void ServiceProfilingExperiment_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_name.decode_text(text_buf);
single_value->field_repetitions.decode_text(text_buf);
single_value->field_profiling__timeout.decode_text(text_buf);
single_value->field_service__name.decode_text(text_buf);
single_value->field_resourcecfgs.decode_text(text_buf);
single_value->field_MpVNFs.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ServiceProfilingExperiment_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @ServiceProfiling_Types.ServiceProfilingExperiment.");
}
}

void ServiceProfilingExperiment_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ServiceProfilingExperiment_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (6<param.get_size()) {
      param.error("record template of type @ServiceProfiling_Types.ServiceProfilingExperiment has 6 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) repetitions().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) profiling__timeout().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) service__name().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) resourcecfgs().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) MpVNFs().set_param(*param.get_elem(5));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "repetitions")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          repetitions().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "profiling_timeout")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          profiling__timeout().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "service_name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          service__name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "resourcecfgs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          resourcecfgs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "MpVNFs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          MpVNFs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.ServiceProfilingExperiment: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@ServiceProfiling_Types.ServiceProfilingExperiment");
  }
  is_ifpresent = param.get_ifpresent();
}

void ServiceProfilingExperiment_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_name.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.ServiceProfilingExperiment");
single_value->field_repetitions.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.ServiceProfilingExperiment");
single_value->field_profiling__timeout.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.ServiceProfilingExperiment");
single_value->field_service__name.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.ServiceProfilingExperiment");
single_value->field_resourcecfgs.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.ServiceProfilingExperiment");
single_value->field_MpVNFs.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.ServiceProfilingExperiment");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@ServiceProfiling_Types.ServiceProfilingExperiment");
}

boolean ServiceProfilingExperiment_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ServiceProfilingExperiment_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

Setup__SFC::Setup__SFC()
{
}

Setup__SFC::Setup__SFC(const CHARSTRING& par_service__name)
  :   field_service__name(par_service__name)
{
}

Setup__SFC::Setup__SFC(const Setup__SFC& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @ServiceProfiling_Types.Setup_SFC.");
if (other_value.service__name().is_bound()) field_service__name = other_value.service__name();
else field_service__name.clean_up();
}

void Setup__SFC::clean_up()
{
field_service__name.clean_up();
}

Setup__SFC& Setup__SFC::operator=(const Setup__SFC& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @ServiceProfiling_Types.Setup_SFC.");
  if (other_value.service__name().is_bound()) field_service__name = other_value.service__name();
  else field_service__name.clean_up();
}
return *this;
}

boolean Setup__SFC::operator==(const Setup__SFC& other_value) const
{
return field_service__name==other_value.field_service__name;
}

boolean Setup__SFC::is_bound() const
{
if(field_service__name.is_bound()) return TRUE;
return FALSE;
}
boolean Setup__SFC::is_value() const
{
if(!field_service__name.is_value()) return FALSE;
return TRUE;
}
void Setup__SFC::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ service_name := ");
field_service__name.log();
TTCN_Logger::log_event_str(" }");
}

void Setup__SFC::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record value of type @ServiceProfiling_Types.Setup_SFC has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) service__name().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "service_name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          service__name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.Setup_SFC: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@ServiceProfiling_Types.Setup_SFC");
  }
}

void Setup__SFC::set_implicit_omit()
{
if (service__name().is_bound()) service__name().set_implicit_omit();
}

void Setup__SFC::encode_text(Text_Buf& text_buf) const
{
field_service__name.encode_text(text_buf);
}

void Setup__SFC::decode_text(Text_Buf& text_buf)
{
field_service__name.decode_text(text_buf);
}

struct Setup__SFC_template::single_value_struct {
CHARSTRING_template field_service__name;
};

void Setup__SFC_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_service__name = ANY_VALUE;
}
}
}

void Setup__SFC_template::copy_value(const Setup__SFC& other_value)
{
single_value = new single_value_struct;
if (other_value.service__name().is_bound()) {
  single_value->field_service__name = other_value.service__name();
} else {
  single_value->field_service__name.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Setup__SFC_template::copy_template(const Setup__SFC_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.service__name().get_selection()) {
single_value->field_service__name = other_value.service__name();
} else {
single_value->field_service__name.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Setup__SFC_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @ServiceProfiling_Types.Setup_SFC.");
break;
}
set_selection(other_value);
}

Setup__SFC_template::Setup__SFC_template()
{
}

Setup__SFC_template::Setup__SFC_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Setup__SFC_template::Setup__SFC_template(const Setup__SFC& other_value)
{
copy_value(other_value);
}

Setup__SFC_template::Setup__SFC_template(const OPTIONAL<Setup__SFC>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Setup__SFC&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @ServiceProfiling_Types.Setup_SFC from an unbound optional field.");
}
}

Setup__SFC_template::Setup__SFC_template(const Setup__SFC_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Setup__SFC_template::~Setup__SFC_template()
{
clean_up();
}

Setup__SFC_template& Setup__SFC_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Setup__SFC_template& Setup__SFC_template::operator=(const Setup__SFC& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Setup__SFC_template& Setup__SFC_template::operator=(const OPTIONAL<Setup__SFC>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Setup__SFC&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @ServiceProfiling_Types.Setup_SFC.");
}
return *this;
}

Setup__SFC_template& Setup__SFC_template::operator=(const Setup__SFC_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Setup__SFC_template::match(const Setup__SFC& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.service__name().is_bound()) return FALSE;
if(!single_value->field_service__name.match(other_value.service__name(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @ServiceProfiling_Types.Setup_SFC.");
}
return FALSE;
}

boolean Setup__SFC_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_service__name.is_bound()) return TRUE;
return FALSE;
}

boolean Setup__SFC_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_service__name.is_value()) return FALSE;
return TRUE;
}

void Setup__SFC_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Setup__SFC Setup__SFC_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @ServiceProfiling_Types.Setup_SFC.");
Setup__SFC ret_val;
if (single_value->field_service__name.is_bound()) {
ret_val.service__name() = single_value->field_service__name.valueof();
}
return ret_val;
}

void Setup__SFC_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @ServiceProfiling_Types.Setup_SFC.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Setup__SFC_template[list_length];
}

Setup__SFC_template& Setup__SFC_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @ServiceProfiling_Types.Setup_SFC.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @ServiceProfiling_Types.Setup_SFC.");
return value_list.list_value[list_index];
}

CHARSTRING_template& Setup__SFC_template::service__name()
{
set_specific();
return single_value->field_service__name;
}

const CHARSTRING_template& Setup__SFC_template::service__name() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field service_name of a non-specific template of type @ServiceProfiling_Types.Setup_SFC.");
return single_value->field_service__name;
}

int Setup__SFC_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Setup_SFC which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @ServiceProfiling_Types.Setup_SFC containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Setup_SFC containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Setup_SFC containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Setup_SFC containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Setup_SFC containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @ServiceProfiling_Types.Setup_SFC.");
  }
  return 0;
}

void Setup__SFC_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ service_name := ");
single_value->field_service__name.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Setup__SFC_template::log_match(const Setup__SFC& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_service__name.match(match_value.service__name(), legacy)){
TTCN_Logger::log_logmatch_info(".service_name");
single_value->field_service__name.log_match(match_value.service__name(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ service_name := ");
single_value->field_service__name.log_match(match_value.service__name(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Setup__SFC_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_service__name.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @ServiceProfiling_Types.Setup_SFC.");
}
}

void Setup__SFC_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_service__name.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Setup__SFC_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @ServiceProfiling_Types.Setup_SFC.");
}
}

void Setup__SFC_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Setup__SFC_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record template of type @ServiceProfiling_Types.Setup_SFC has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) service__name().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "service_name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          service__name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.Setup_SFC: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@ServiceProfiling_Types.Setup_SFC");
  }
  is_ifpresent = param.get_ifpresent();
}

void Setup__SFC_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_service__name.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.Setup_SFC");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@ServiceProfiling_Types.Setup_SFC");
}

boolean Setup__SFC_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Setup__SFC_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

Add__VNF::Add__VNF()
{
}

Add__VNF::Add__VNF(const CHARSTRING& par_name,
    const CHARSTRING& par_connection__point,
    const CHARSTRING& par_image)
  :   field_name(par_name),
  field_connection__point(par_connection__point),
  field_image(par_image)
{
}

Add__VNF::Add__VNF(const Add__VNF& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @ServiceProfiling_Types.Add_VNF.");
if (other_value.name().is_bound()) field_name = other_value.name();
else field_name.clean_up();
if (other_value.connection__point().is_bound()) field_connection__point = other_value.connection__point();
else field_connection__point.clean_up();
if (other_value.image().is_bound()) field_image = other_value.image();
else field_image.clean_up();
}

void Add__VNF::clean_up()
{
field_name.clean_up();
field_connection__point.clean_up();
field_image.clean_up();
}

Add__VNF& Add__VNF::operator=(const Add__VNF& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @ServiceProfiling_Types.Add_VNF.");
  if (other_value.name().is_bound()) field_name = other_value.name();
  else field_name.clean_up();
  if (other_value.connection__point().is_bound()) field_connection__point = other_value.connection__point();
  else field_connection__point.clean_up();
  if (other_value.image().is_bound()) field_image = other_value.image();
  else field_image.clean_up();
}
return *this;
}

boolean Add__VNF::operator==(const Add__VNF& other_value) const
{
return field_name==other_value.field_name
  && field_connection__point==other_value.field_connection__point
  && field_image==other_value.field_image;
}

boolean Add__VNF::is_bound() const
{
if(field_name.is_bound()) return TRUE;
if(field_connection__point.is_bound()) return TRUE;
if(field_image.is_bound()) return TRUE;
return FALSE;
}
boolean Add__VNF::is_value() const
{
if(!field_name.is_value()) return FALSE;
if(!field_connection__point.is_value()) return FALSE;
if(!field_image.is_value()) return FALSE;
return TRUE;
}
void Add__VNF::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ name := ");
field_name.log();
TTCN_Logger::log_event_str(", connection_point := ");
field_connection__point.log();
TTCN_Logger::log_event_str(", image := ");
field_image.log();
TTCN_Logger::log_event_str(" }");
}

void Add__VNF::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record value of type @ServiceProfiling_Types.Add_VNF has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) connection__point().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) image().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "connection_point")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          connection__point().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "image")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          image().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.Add_VNF: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@ServiceProfiling_Types.Add_VNF");
  }
}

void Add__VNF::set_implicit_omit()
{
if (name().is_bound()) name().set_implicit_omit();
if (connection__point().is_bound()) connection__point().set_implicit_omit();
if (image().is_bound()) image().set_implicit_omit();
}

void Add__VNF::encode_text(Text_Buf& text_buf) const
{
field_name.encode_text(text_buf);
field_connection__point.encode_text(text_buf);
field_image.encode_text(text_buf);
}

void Add__VNF::decode_text(Text_Buf& text_buf)
{
field_name.decode_text(text_buf);
field_connection__point.decode_text(text_buf);
field_image.decode_text(text_buf);
}

struct Add__VNF_template::single_value_struct {
CHARSTRING_template field_name;
CHARSTRING_template field_connection__point;
CHARSTRING_template field_image;
};

void Add__VNF_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_name = ANY_VALUE;
single_value->field_connection__point = ANY_VALUE;
single_value->field_image = ANY_VALUE;
}
}
}

void Add__VNF_template::copy_value(const Add__VNF& other_value)
{
single_value = new single_value_struct;
if (other_value.name().is_bound()) {
  single_value->field_name = other_value.name();
} else {
  single_value->field_name.clean_up();
}
if (other_value.connection__point().is_bound()) {
  single_value->field_connection__point = other_value.connection__point();
} else {
  single_value->field_connection__point.clean_up();
}
if (other_value.image().is_bound()) {
  single_value->field_image = other_value.image();
} else {
  single_value->field_image.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Add__VNF_template::copy_template(const Add__VNF_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.name().get_selection()) {
single_value->field_name = other_value.name();
} else {
single_value->field_name.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.connection__point().get_selection()) {
single_value->field_connection__point = other_value.connection__point();
} else {
single_value->field_connection__point.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.image().get_selection()) {
single_value->field_image = other_value.image();
} else {
single_value->field_image.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Add__VNF_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @ServiceProfiling_Types.Add_VNF.");
break;
}
set_selection(other_value);
}

Add__VNF_template::Add__VNF_template()
{
}

Add__VNF_template::Add__VNF_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Add__VNF_template::Add__VNF_template(const Add__VNF& other_value)
{
copy_value(other_value);
}

Add__VNF_template::Add__VNF_template(const OPTIONAL<Add__VNF>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Add__VNF&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @ServiceProfiling_Types.Add_VNF from an unbound optional field.");
}
}

Add__VNF_template::Add__VNF_template(const Add__VNF_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Add__VNF_template::~Add__VNF_template()
{
clean_up();
}

Add__VNF_template& Add__VNF_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Add__VNF_template& Add__VNF_template::operator=(const Add__VNF& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Add__VNF_template& Add__VNF_template::operator=(const OPTIONAL<Add__VNF>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Add__VNF&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @ServiceProfiling_Types.Add_VNF.");
}
return *this;
}

Add__VNF_template& Add__VNF_template::operator=(const Add__VNF_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Add__VNF_template::match(const Add__VNF& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.name().is_bound()) return FALSE;
if(!single_value->field_name.match(other_value.name(), legacy))return FALSE;
if(!other_value.connection__point().is_bound()) return FALSE;
if(!single_value->field_connection__point.match(other_value.connection__point(), legacy))return FALSE;
if(!other_value.image().is_bound()) return FALSE;
if(!single_value->field_image.match(other_value.image(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @ServiceProfiling_Types.Add_VNF.");
}
return FALSE;
}

boolean Add__VNF_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_name.is_bound()) return TRUE;
if (single_value->field_connection__point.is_bound()) return TRUE;
if (single_value->field_image.is_bound()) return TRUE;
return FALSE;
}

boolean Add__VNF_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_name.is_value()) return FALSE;
if (!single_value->field_connection__point.is_value()) return FALSE;
if (!single_value->field_image.is_value()) return FALSE;
return TRUE;
}

void Add__VNF_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Add__VNF Add__VNF_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @ServiceProfiling_Types.Add_VNF.");
Add__VNF ret_val;
if (single_value->field_name.is_bound()) {
ret_val.name() = single_value->field_name.valueof();
}
if (single_value->field_connection__point.is_bound()) {
ret_val.connection__point() = single_value->field_connection__point.valueof();
}
if (single_value->field_image.is_bound()) {
ret_val.image() = single_value->field_image.valueof();
}
return ret_val;
}

void Add__VNF_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @ServiceProfiling_Types.Add_VNF.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Add__VNF_template[list_length];
}

Add__VNF_template& Add__VNF_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @ServiceProfiling_Types.Add_VNF.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @ServiceProfiling_Types.Add_VNF.");
return value_list.list_value[list_index];
}

CHARSTRING_template& Add__VNF_template::name()
{
set_specific();
return single_value->field_name;
}

const CHARSTRING_template& Add__VNF_template::name() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field name of a non-specific template of type @ServiceProfiling_Types.Add_VNF.");
return single_value->field_name;
}

CHARSTRING_template& Add__VNF_template::connection__point()
{
set_specific();
return single_value->field_connection__point;
}

const CHARSTRING_template& Add__VNF_template::connection__point() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field connection_point of a non-specific template of type @ServiceProfiling_Types.Add_VNF.");
return single_value->field_connection__point;
}

CHARSTRING_template& Add__VNF_template::image()
{
set_specific();
return single_value->field_image;
}

const CHARSTRING_template& Add__VNF_template::image() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field image of a non-specific template of type @ServiceProfiling_Types.Add_VNF.");
return single_value->field_image;
}

int Add__VNF_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Add_VNF which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 3;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @ServiceProfiling_Types.Add_VNF containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Add_VNF containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Add_VNF containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Add_VNF containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Add_VNF containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @ServiceProfiling_Types.Add_VNF.");
  }
  return 0;
}

void Add__VNF_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ name := ");
single_value->field_name.log();
TTCN_Logger::log_event_str(", connection_point := ");
single_value->field_connection__point.log();
TTCN_Logger::log_event_str(", image := ");
single_value->field_image.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Add__VNF_template::log_match(const Add__VNF& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_name.match(match_value.name(), legacy)){
TTCN_Logger::log_logmatch_info(".name");
single_value->field_name.log_match(match_value.name(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_connection__point.match(match_value.connection__point(), legacy)){
TTCN_Logger::log_logmatch_info(".connection_point");
single_value->field_connection__point.log_match(match_value.connection__point(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_image.match(match_value.image(), legacy)){
TTCN_Logger::log_logmatch_info(".image");
single_value->field_image.log_match(match_value.image(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ name := ");
single_value->field_name.log_match(match_value.name(), legacy);
TTCN_Logger::log_event_str(", connection_point := ");
single_value->field_connection__point.log_match(match_value.connection__point(), legacy);
TTCN_Logger::log_event_str(", image := ");
single_value->field_image.log_match(match_value.image(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Add__VNF_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_name.encode_text(text_buf);
single_value->field_connection__point.encode_text(text_buf);
single_value->field_image.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @ServiceProfiling_Types.Add_VNF.");
}
}

void Add__VNF_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_name.decode_text(text_buf);
single_value->field_connection__point.decode_text(text_buf);
single_value->field_image.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Add__VNF_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @ServiceProfiling_Types.Add_VNF.");
}
}

void Add__VNF_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Add__VNF_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record template of type @ServiceProfiling_Types.Add_VNF has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) connection__point().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) image().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "connection_point")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          connection__point().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "image")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          image().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.Add_VNF: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@ServiceProfiling_Types.Add_VNF");
  }
  is_ifpresent = param.get_ifpresent();
}

void Add__VNF_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_name.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.Add_VNF");
single_value->field_connection__point.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.Add_VNF");
single_value->field_image.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.Add_VNF");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@ServiceProfiling_Types.Add_VNF");
}

boolean Add__VNF_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Add__VNF_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

Start__CMD::Start__CMD()
{
}

Start__CMD::Start__CMD(const CHARSTRING& par_cmd)
  :   field_cmd(par_cmd)
{
}

Start__CMD::Start__CMD(const Start__CMD& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @ServiceProfiling_Types.Start_CMD.");
if (other_value.cmd().is_bound()) field_cmd = other_value.cmd();
else field_cmd.clean_up();
}

void Start__CMD::clean_up()
{
field_cmd.clean_up();
}

Start__CMD& Start__CMD::operator=(const Start__CMD& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @ServiceProfiling_Types.Start_CMD.");
  if (other_value.cmd().is_bound()) field_cmd = other_value.cmd();
  else field_cmd.clean_up();
}
return *this;
}

boolean Start__CMD::operator==(const Start__CMD& other_value) const
{
return field_cmd==other_value.field_cmd;
}

boolean Start__CMD::is_bound() const
{
if(field_cmd.is_bound()) return TRUE;
return FALSE;
}
boolean Start__CMD::is_value() const
{
if(!field_cmd.is_value()) return FALSE;
return TRUE;
}
void Start__CMD::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ cmd := ");
field_cmd.log();
TTCN_Logger::log_event_str(" }");
}

void Start__CMD::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record value of type @ServiceProfiling_Types.Start_CMD has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) cmd().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cmd")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cmd().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.Start_CMD: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@ServiceProfiling_Types.Start_CMD");
  }
}

void Start__CMD::set_implicit_omit()
{
if (cmd().is_bound()) cmd().set_implicit_omit();
}

void Start__CMD::encode_text(Text_Buf& text_buf) const
{
field_cmd.encode_text(text_buf);
}

void Start__CMD::decode_text(Text_Buf& text_buf)
{
field_cmd.decode_text(text_buf);
}

struct Start__CMD_template::single_value_struct {
CHARSTRING_template field_cmd;
};

void Start__CMD_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_cmd = ANY_VALUE;
}
}
}

void Start__CMD_template::copy_value(const Start__CMD& other_value)
{
single_value = new single_value_struct;
if (other_value.cmd().is_bound()) {
  single_value->field_cmd = other_value.cmd();
} else {
  single_value->field_cmd.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Start__CMD_template::copy_template(const Start__CMD_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.cmd().get_selection()) {
single_value->field_cmd = other_value.cmd();
} else {
single_value->field_cmd.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Start__CMD_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @ServiceProfiling_Types.Start_CMD.");
break;
}
set_selection(other_value);
}

Start__CMD_template::Start__CMD_template()
{
}

Start__CMD_template::Start__CMD_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Start__CMD_template::Start__CMD_template(const Start__CMD& other_value)
{
copy_value(other_value);
}

Start__CMD_template::Start__CMD_template(const OPTIONAL<Start__CMD>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Start__CMD&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @ServiceProfiling_Types.Start_CMD from an unbound optional field.");
}
}

Start__CMD_template::Start__CMD_template(const Start__CMD_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Start__CMD_template::~Start__CMD_template()
{
clean_up();
}

Start__CMD_template& Start__CMD_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Start__CMD_template& Start__CMD_template::operator=(const Start__CMD& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Start__CMD_template& Start__CMD_template::operator=(const OPTIONAL<Start__CMD>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Start__CMD&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @ServiceProfiling_Types.Start_CMD.");
}
return *this;
}

Start__CMD_template& Start__CMD_template::operator=(const Start__CMD_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Start__CMD_template::match(const Start__CMD& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.cmd().is_bound()) return FALSE;
if(!single_value->field_cmd.match(other_value.cmd(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @ServiceProfiling_Types.Start_CMD.");
}
return FALSE;
}

boolean Start__CMD_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_cmd.is_bound()) return TRUE;
return FALSE;
}

boolean Start__CMD_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_cmd.is_value()) return FALSE;
return TRUE;
}

void Start__CMD_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Start__CMD Start__CMD_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @ServiceProfiling_Types.Start_CMD.");
Start__CMD ret_val;
if (single_value->field_cmd.is_bound()) {
ret_val.cmd() = single_value->field_cmd.valueof();
}
return ret_val;
}

void Start__CMD_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @ServiceProfiling_Types.Start_CMD.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Start__CMD_template[list_length];
}

Start__CMD_template& Start__CMD_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @ServiceProfiling_Types.Start_CMD.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @ServiceProfiling_Types.Start_CMD.");
return value_list.list_value[list_index];
}

CHARSTRING_template& Start__CMD_template::cmd()
{
set_specific();
return single_value->field_cmd;
}

const CHARSTRING_template& Start__CMD_template::cmd() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field cmd of a non-specific template of type @ServiceProfiling_Types.Start_CMD.");
return single_value->field_cmd;
}

int Start__CMD_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Start_CMD which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @ServiceProfiling_Types.Start_CMD containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Start_CMD containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Start_CMD containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Start_CMD containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Start_CMD containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @ServiceProfiling_Types.Start_CMD.");
  }
  return 0;
}

void Start__CMD_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ cmd := ");
single_value->field_cmd.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Start__CMD_template::log_match(const Start__CMD& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_cmd.match(match_value.cmd(), legacy)){
TTCN_Logger::log_logmatch_info(".cmd");
single_value->field_cmd.log_match(match_value.cmd(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ cmd := ");
single_value->field_cmd.log_match(match_value.cmd(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Start__CMD_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_cmd.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @ServiceProfiling_Types.Start_CMD.");
}
}

void Start__CMD_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_cmd.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Start__CMD_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @ServiceProfiling_Types.Start_CMD.");
}
}

void Start__CMD_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Start__CMD_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record template of type @ServiceProfiling_Types.Start_CMD has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) cmd().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cmd")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cmd().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.Start_CMD: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@ServiceProfiling_Types.Start_CMD");
  }
  is_ifpresent = param.get_ifpresent();
}

void Start__CMD_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_cmd.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.Start_CMD");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@ServiceProfiling_Types.Start_CMD");
}

boolean Start__CMD_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Start__CMD_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

Start__CMD__reply::Start__CMD__reply()
{
}

Start__CMD__reply::Start__CMD__reply(const CHARSTRING& par_cmd__reply)
  :   field_cmd__reply(par_cmd__reply)
{
}

Start__CMD__reply::Start__CMD__reply(const Start__CMD__reply& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @ServiceProfiling_Types.Start_CMD_reply.");
if (other_value.cmd__reply().is_bound()) field_cmd__reply = other_value.cmd__reply();
else field_cmd__reply.clean_up();
}

void Start__CMD__reply::clean_up()
{
field_cmd__reply.clean_up();
}

Start__CMD__reply& Start__CMD__reply::operator=(const Start__CMD__reply& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @ServiceProfiling_Types.Start_CMD_reply.");
  if (other_value.cmd__reply().is_bound()) field_cmd__reply = other_value.cmd__reply();
  else field_cmd__reply.clean_up();
}
return *this;
}

boolean Start__CMD__reply::operator==(const Start__CMD__reply& other_value) const
{
return field_cmd__reply==other_value.field_cmd__reply;
}

boolean Start__CMD__reply::is_bound() const
{
if(field_cmd__reply.is_bound()) return TRUE;
return FALSE;
}
boolean Start__CMD__reply::is_value() const
{
if(!field_cmd__reply.is_value()) return FALSE;
return TRUE;
}
void Start__CMD__reply::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ cmd_reply := ");
field_cmd__reply.log();
TTCN_Logger::log_event_str(" }");
}

void Start__CMD__reply::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record value of type @ServiceProfiling_Types.Start_CMD_reply has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) cmd__reply().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cmd_reply")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cmd__reply().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.Start_CMD_reply: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@ServiceProfiling_Types.Start_CMD_reply");
  }
}

void Start__CMD__reply::set_implicit_omit()
{
if (cmd__reply().is_bound()) cmd__reply().set_implicit_omit();
}

void Start__CMD__reply::encode_text(Text_Buf& text_buf) const
{
field_cmd__reply.encode_text(text_buf);
}

void Start__CMD__reply::decode_text(Text_Buf& text_buf)
{
field_cmd__reply.decode_text(text_buf);
}

struct Start__CMD__reply_template::single_value_struct {
CHARSTRING_template field_cmd__reply;
};

void Start__CMD__reply_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_cmd__reply = ANY_VALUE;
}
}
}

void Start__CMD__reply_template::copy_value(const Start__CMD__reply& other_value)
{
single_value = new single_value_struct;
if (other_value.cmd__reply().is_bound()) {
  single_value->field_cmd__reply = other_value.cmd__reply();
} else {
  single_value->field_cmd__reply.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Start__CMD__reply_template::copy_template(const Start__CMD__reply_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.cmd__reply().get_selection()) {
single_value->field_cmd__reply = other_value.cmd__reply();
} else {
single_value->field_cmd__reply.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Start__CMD__reply_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @ServiceProfiling_Types.Start_CMD_reply.");
break;
}
set_selection(other_value);
}

Start__CMD__reply_template::Start__CMD__reply_template()
{
}

Start__CMD__reply_template::Start__CMD__reply_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Start__CMD__reply_template::Start__CMD__reply_template(const Start__CMD__reply& other_value)
{
copy_value(other_value);
}

Start__CMD__reply_template::Start__CMD__reply_template(const OPTIONAL<Start__CMD__reply>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Start__CMD__reply&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @ServiceProfiling_Types.Start_CMD_reply from an unbound optional field.");
}
}

Start__CMD__reply_template::Start__CMD__reply_template(const Start__CMD__reply_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Start__CMD__reply_template::~Start__CMD__reply_template()
{
clean_up();
}

Start__CMD__reply_template& Start__CMD__reply_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Start__CMD__reply_template& Start__CMD__reply_template::operator=(const Start__CMD__reply& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Start__CMD__reply_template& Start__CMD__reply_template::operator=(const OPTIONAL<Start__CMD__reply>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Start__CMD__reply&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @ServiceProfiling_Types.Start_CMD_reply.");
}
return *this;
}

Start__CMD__reply_template& Start__CMD__reply_template::operator=(const Start__CMD__reply_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Start__CMD__reply_template::match(const Start__CMD__reply& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.cmd__reply().is_bound()) return FALSE;
if(!single_value->field_cmd__reply.match(other_value.cmd__reply(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @ServiceProfiling_Types.Start_CMD_reply.");
}
return FALSE;
}

boolean Start__CMD__reply_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_cmd__reply.is_bound()) return TRUE;
return FALSE;
}

boolean Start__CMD__reply_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_cmd__reply.is_value()) return FALSE;
return TRUE;
}

void Start__CMD__reply_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Start__CMD__reply Start__CMD__reply_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @ServiceProfiling_Types.Start_CMD_reply.");
Start__CMD__reply ret_val;
if (single_value->field_cmd__reply.is_bound()) {
ret_val.cmd__reply() = single_value->field_cmd__reply.valueof();
}
return ret_val;
}

void Start__CMD__reply_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @ServiceProfiling_Types.Start_CMD_reply.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Start__CMD__reply_template[list_length];
}

Start__CMD__reply_template& Start__CMD__reply_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @ServiceProfiling_Types.Start_CMD_reply.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @ServiceProfiling_Types.Start_CMD_reply.");
return value_list.list_value[list_index];
}

CHARSTRING_template& Start__CMD__reply_template::cmd__reply()
{
set_specific();
return single_value->field_cmd__reply;
}

const CHARSTRING_template& Start__CMD__reply_template::cmd__reply() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field cmd_reply of a non-specific template of type @ServiceProfiling_Types.Start_CMD_reply.");
return single_value->field_cmd__reply;
}

int Start__CMD__reply_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Start_CMD_reply which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @ServiceProfiling_Types.Start_CMD_reply containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Start_CMD_reply containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Start_CMD_reply containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Start_CMD_reply containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Start_CMD_reply containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @ServiceProfiling_Types.Start_CMD_reply.");
  }
  return 0;
}

void Start__CMD__reply_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ cmd_reply := ");
single_value->field_cmd__reply.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Start__CMD__reply_template::log_match(const Start__CMD__reply& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_cmd__reply.match(match_value.cmd__reply(), legacy)){
TTCN_Logger::log_logmatch_info(".cmd_reply");
single_value->field_cmd__reply.log_match(match_value.cmd__reply(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ cmd_reply := ");
single_value->field_cmd__reply.log_match(match_value.cmd__reply(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Start__CMD__reply_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_cmd__reply.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @ServiceProfiling_Types.Start_CMD_reply.");
}
}

void Start__CMD__reply_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_cmd__reply.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Start__CMD__reply_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @ServiceProfiling_Types.Start_CMD_reply.");
}
}

void Start__CMD__reply_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Start__CMD__reply_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record template of type @ServiceProfiling_Types.Start_CMD_reply has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) cmd__reply().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cmd_reply")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cmd__reply().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.Start_CMD_reply: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@ServiceProfiling_Types.Start_CMD_reply");
  }
  is_ifpresent = param.get_ifpresent();
}

void Start__CMD__reply_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_cmd__reply.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.Start_CMD_reply");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@ServiceProfiling_Types.Start_CMD_reply");
}

boolean Start__CMD__reply_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Start__CMD__reply_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

Parameter__Macro::Parameter__Macro()
{
}

Parameter__Macro::Parameter__Macro(const FLOAT& par_beginning,
    const FLOAT& par_end,
    const FLOAT& par_step)
  :   field_beginning(par_beginning),
  field_end(par_end),
  field_step(par_step)
{
}

Parameter__Macro::Parameter__Macro(const Parameter__Macro& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @ServiceProfiling_Types.Parameter_Macro.");
if (other_value.beginning().is_bound()) field_beginning = other_value.beginning();
else field_beginning.clean_up();
if (other_value.end().is_bound()) field_end = other_value.end();
else field_end.clean_up();
if (other_value.step().is_bound()) field_step = other_value.step();
else field_step.clean_up();
}

void Parameter__Macro::clean_up()
{
field_beginning.clean_up();
field_end.clean_up();
field_step.clean_up();
}

Parameter__Macro& Parameter__Macro::operator=(const Parameter__Macro& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @ServiceProfiling_Types.Parameter_Macro.");
  if (other_value.beginning().is_bound()) field_beginning = other_value.beginning();
  else field_beginning.clean_up();
  if (other_value.end().is_bound()) field_end = other_value.end();
  else field_end.clean_up();
  if (other_value.step().is_bound()) field_step = other_value.step();
  else field_step.clean_up();
}
return *this;
}

boolean Parameter__Macro::operator==(const Parameter__Macro& other_value) const
{
return field_beginning==other_value.field_beginning
  && field_end==other_value.field_end
  && field_step==other_value.field_step;
}

boolean Parameter__Macro::is_bound() const
{
if(field_beginning.is_bound()) return TRUE;
if(field_end.is_bound()) return TRUE;
if(field_step.is_bound()) return TRUE;
return FALSE;
}
boolean Parameter__Macro::is_value() const
{
if(!field_beginning.is_value()) return FALSE;
if(!field_end.is_value()) return FALSE;
if(!field_step.is_value()) return FALSE;
return TRUE;
}
void Parameter__Macro::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ beginning := ");
field_beginning.log();
TTCN_Logger::log_event_str(", end := ");
field_end.log();
TTCN_Logger::log_event_str(", step := ");
field_step.log();
TTCN_Logger::log_event_str(" }");
}

void Parameter__Macro::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record value of type @ServiceProfiling_Types.Parameter_Macro has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) beginning().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) end().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) step().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "beginning")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          beginning().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "end")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          end().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "step")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          step().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.Parameter_Macro: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@ServiceProfiling_Types.Parameter_Macro");
  }
}

void Parameter__Macro::set_implicit_omit()
{
if (beginning().is_bound()) beginning().set_implicit_omit();
if (end().is_bound()) end().set_implicit_omit();
if (step().is_bound()) step().set_implicit_omit();
}

void Parameter__Macro::encode_text(Text_Buf& text_buf) const
{
field_beginning.encode_text(text_buf);
field_end.encode_text(text_buf);
field_step.encode_text(text_buf);
}

void Parameter__Macro::decode_text(Text_Buf& text_buf)
{
field_beginning.decode_text(text_buf);
field_end.decode_text(text_buf);
field_step.decode_text(text_buf);
}

struct Parameter__Macro_template::single_value_struct {
FLOAT_template field_beginning;
FLOAT_template field_end;
FLOAT_template field_step;
};

void Parameter__Macro_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_beginning = ANY_VALUE;
single_value->field_end = ANY_VALUE;
single_value->field_step = ANY_VALUE;
}
}
}

void Parameter__Macro_template::copy_value(const Parameter__Macro& other_value)
{
single_value = new single_value_struct;
if (other_value.beginning().is_bound()) {
  single_value->field_beginning = other_value.beginning();
} else {
  single_value->field_beginning.clean_up();
}
if (other_value.end().is_bound()) {
  single_value->field_end = other_value.end();
} else {
  single_value->field_end.clean_up();
}
if (other_value.step().is_bound()) {
  single_value->field_step = other_value.step();
} else {
  single_value->field_step.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Parameter__Macro_template::copy_template(const Parameter__Macro_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.beginning().get_selection()) {
single_value->field_beginning = other_value.beginning();
} else {
single_value->field_beginning.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.end().get_selection()) {
single_value->field_end = other_value.end();
} else {
single_value->field_end.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.step().get_selection()) {
single_value->field_step = other_value.step();
} else {
single_value->field_step.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Parameter__Macro_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @ServiceProfiling_Types.Parameter_Macro.");
break;
}
set_selection(other_value);
}

Parameter__Macro_template::Parameter__Macro_template()
{
}

Parameter__Macro_template::Parameter__Macro_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Parameter__Macro_template::Parameter__Macro_template(const Parameter__Macro& other_value)
{
copy_value(other_value);
}

Parameter__Macro_template::Parameter__Macro_template(const OPTIONAL<Parameter__Macro>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Parameter__Macro&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @ServiceProfiling_Types.Parameter_Macro from an unbound optional field.");
}
}

Parameter__Macro_template::Parameter__Macro_template(const Parameter__Macro_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Parameter__Macro_template::~Parameter__Macro_template()
{
clean_up();
}

Parameter__Macro_template& Parameter__Macro_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Parameter__Macro_template& Parameter__Macro_template::operator=(const Parameter__Macro& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Parameter__Macro_template& Parameter__Macro_template::operator=(const OPTIONAL<Parameter__Macro>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Parameter__Macro&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @ServiceProfiling_Types.Parameter_Macro.");
}
return *this;
}

Parameter__Macro_template& Parameter__Macro_template::operator=(const Parameter__Macro_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Parameter__Macro_template::match(const Parameter__Macro& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.beginning().is_bound()) return FALSE;
if(!single_value->field_beginning.match(other_value.beginning(), legacy))return FALSE;
if(!other_value.end().is_bound()) return FALSE;
if(!single_value->field_end.match(other_value.end(), legacy))return FALSE;
if(!other_value.step().is_bound()) return FALSE;
if(!single_value->field_step.match(other_value.step(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @ServiceProfiling_Types.Parameter_Macro.");
}
return FALSE;
}

boolean Parameter__Macro_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_beginning.is_bound()) return TRUE;
if (single_value->field_end.is_bound()) return TRUE;
if (single_value->field_step.is_bound()) return TRUE;
return FALSE;
}

boolean Parameter__Macro_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_beginning.is_value()) return FALSE;
if (!single_value->field_end.is_value()) return FALSE;
if (!single_value->field_step.is_value()) return FALSE;
return TRUE;
}

void Parameter__Macro_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Parameter__Macro Parameter__Macro_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @ServiceProfiling_Types.Parameter_Macro.");
Parameter__Macro ret_val;
if (single_value->field_beginning.is_bound()) {
ret_val.beginning() = single_value->field_beginning.valueof();
}
if (single_value->field_end.is_bound()) {
ret_val.end() = single_value->field_end.valueof();
}
if (single_value->field_step.is_bound()) {
ret_val.step() = single_value->field_step.valueof();
}
return ret_val;
}

void Parameter__Macro_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @ServiceProfiling_Types.Parameter_Macro.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Parameter__Macro_template[list_length];
}

Parameter__Macro_template& Parameter__Macro_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @ServiceProfiling_Types.Parameter_Macro.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @ServiceProfiling_Types.Parameter_Macro.");
return value_list.list_value[list_index];
}

FLOAT_template& Parameter__Macro_template::beginning()
{
set_specific();
return single_value->field_beginning;
}

const FLOAT_template& Parameter__Macro_template::beginning() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field beginning of a non-specific template of type @ServiceProfiling_Types.Parameter_Macro.");
return single_value->field_beginning;
}

FLOAT_template& Parameter__Macro_template::end()
{
set_specific();
return single_value->field_end;
}

const FLOAT_template& Parameter__Macro_template::end() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field end of a non-specific template of type @ServiceProfiling_Types.Parameter_Macro.");
return single_value->field_end;
}

FLOAT_template& Parameter__Macro_template::step()
{
set_specific();
return single_value->field_step;
}

const FLOAT_template& Parameter__Macro_template::step() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field step of a non-specific template of type @ServiceProfiling_Types.Parameter_Macro.");
return single_value->field_step;
}

int Parameter__Macro_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Parameter_Macro which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 3;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @ServiceProfiling_Types.Parameter_Macro containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Parameter_Macro containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Parameter_Macro containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Parameter_Macro containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @ServiceProfiling_Types.Parameter_Macro containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @ServiceProfiling_Types.Parameter_Macro.");
  }
  return 0;
}

void Parameter__Macro_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ beginning := ");
single_value->field_beginning.log();
TTCN_Logger::log_event_str(", end := ");
single_value->field_end.log();
TTCN_Logger::log_event_str(", step := ");
single_value->field_step.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Parameter__Macro_template::log_match(const Parameter__Macro& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_beginning.match(match_value.beginning(), legacy)){
TTCN_Logger::log_logmatch_info(".beginning");
single_value->field_beginning.log_match(match_value.beginning(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_end.match(match_value.end(), legacy)){
TTCN_Logger::log_logmatch_info(".end");
single_value->field_end.log_match(match_value.end(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_step.match(match_value.step(), legacy)){
TTCN_Logger::log_logmatch_info(".step");
single_value->field_step.log_match(match_value.step(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ beginning := ");
single_value->field_beginning.log_match(match_value.beginning(), legacy);
TTCN_Logger::log_event_str(", end := ");
single_value->field_end.log_match(match_value.end(), legacy);
TTCN_Logger::log_event_str(", step := ");
single_value->field_step.log_match(match_value.step(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Parameter__Macro_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_beginning.encode_text(text_buf);
single_value->field_end.encode_text(text_buf);
single_value->field_step.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @ServiceProfiling_Types.Parameter_Macro.");
}
}

void Parameter__Macro_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_beginning.decode_text(text_buf);
single_value->field_end.decode_text(text_buf);
single_value->field_step.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Parameter__Macro_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @ServiceProfiling_Types.Parameter_Macro.");
}
}

void Parameter__Macro_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Parameter__Macro_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record template of type @ServiceProfiling_Types.Parameter_Macro has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) beginning().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) end().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) step().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "beginning")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          beginning().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "end")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          end().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "step")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          step().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @ServiceProfiling_Types.Parameter_Macro: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@ServiceProfiling_Types.Parameter_Macro");
  }
  is_ifpresent = param.get_ifpresent();
}

void Parameter__Macro_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_beginning.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.Parameter_Macro");
single_value->field_end.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.Parameter_Macro");
single_value->field_step.check_restriction(t_res, t_name ? t_name : "@ServiceProfiling_Types.Parameter_Macro");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@ServiceProfiling_Types.Parameter_Macro");
}

boolean Parameter__Macro_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Parameter__Macro_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


/* Bodies of functions, altsteps and testcases */

boolean operator==(null_type, const ResourceConfigurations& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @ServiceProfiling_Types.ResourceConfigurations.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const MeasuringPointVNFs& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @ServiceProfiling_Types.MeasuringPointVNFs.");
return other_value.val_ptr->n_elements == 0;
}


} /* end of namespace */
